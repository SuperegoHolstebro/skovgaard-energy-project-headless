/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch'
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: 'sanity.imagePalette'
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions'
  height?: number
  width?: number
  aspectRatio?: number
}

export type Geopoint = {
  _type: 'geopoint'
  lat?: number
  lng?: number
  alt?: number
}

export type Media = {
  _type: 'media'
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  file?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.fileAsset'
    }
    media?: unknown
    _type: 'file'
  }
}

export type Padding = {
  _type: 'padding'
  spacingTop?: 'default' | 'none'
  spacingBottom?: 'default' | 'none'
}

export type Color = {
  _type: 'color'
  color?: 'lys' | 'm\xF8rk' | 'lilla'
}

export type Video = {
  _type: 'video'
  videoLabel?: string
  url?: string
}

export type TextWithIllustration = {
  _type: 'textWithIllustration'
  innerBlocks?: Array<
    | ({
        _key: string
      } & Heading)
    | ({
        _key: string
      } & TextBlock)
    | ({
        _key: string
      } & Button)
    | ({
        _key: string
      } & Accordion)
  >
  MediaObject?: MediaObject
  flip?: boolean
  design?: Design
  SectionSettings?: SectionSettings
}

export type TextContainer = {
  _type: 'textContainer'
  innerBlocks?: Array<
    | ({
        _key: string
      } & Heading)
    | ({
        _key: string
      } & TextBlock)
    | ({
        _key: string
      } & Button)
    | ({
        _key: string
      } & Accordion)
  >
  design?: Design
  SectionSettings?: SectionSettings
}

export type PageBuilder = Array<
  | ({
      _key: string
    } & Hero)
  | ({
      _key: string
    } & Hero2)
  | ({
      _key: string
    } & Hero3)
  | ({
      _key: string
    } & EmployeesType)
  | ({
      _key: string
    } & ContactFormType)
  | ({
      _key: string
    } & ArticlesType)
  | ({
      _key: string
    } & CallToAction)
  | ({
      _key: string
    } & CallToAction2)
  | ({
      _key: string
    } & Gallery)
  | ({
      _key: string
    } & LogoGallery)
  | ({
      _key: string
    } & LogoGallery2)
  | ({
      _key: string
    } & EventType)
  | ({
      _key: string
    } & MediaType)
  | ({
      _key: string
    } & TextWithIllustration)
  | ({
      _key: string
    } & TextContainer)
  | ({
      _key: string
    } & IconPicker)
>

export type InnerBlocks = Array<
  | ({
      _key: string
    } & Heading)
  | ({
      _key: string
    } & TextBlock)
  | ({
      _key: string
    } & Button)
  | ({
      _key: string
    } & Accordion)
>

export type Hero = {
  _type: 'hero'
  title?: string
  subtitle?: string
  MediaObject?: MediaObject
  SectionSettings?: SectionSettings
}

export type Form = {
  _type: 'form'
  label?: string
  heading?: string
  form?: 'newsletter' | 'register' | 'contact'
}

export type ContactFormType = {
  _type: 'contactFormType'
  heading?: Heading
  array?: Array<{
    required?: boolean
    fieldName: string
    placeholder: string
    fieldId: Slug
    inputType: 'text' | 'email' | 'phone' | 'textArea' | 'file'
    _type: 'formFields'
    _key: string
  }>
  design?: Design
  SectionSettings?: SectionSettings
}

export type MediaType = {
  _type: 'MediaType'
  select?: 'image' | 'video' | 'vimeo'
  imageObject: {
    image?: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
    }
    size?: 'none' | 'default'
    aspectRatio?: 'auto' | '1:1' | '16:9' | '4:3' | '3:2' | '3:4' | '2:3'
    objectFit?: 'contain' | 'cover'
  }
  videoObject?: {
    video?: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.fileAsset'
      }
      media?: unknown
      _type: 'file'
    }
    thumbnail?: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
    }
    size?: 'none' | 'default'
  }
  vimeoObject?: {
    vimeo: string
    size?: 'none' | 'default'
  }
  design?: Design
  SectionSettings?: SectionSettings
}

export type LogoGallery2 = {
  _type: 'LogoGallery2'
  title?: string
  images?: Array<{
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
    _key: string
  }>
}

export type LogoGallery = {
  _type: 'LogoGallery'
  title?: string
  images?: Array<{
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
    _key: string
  }>
}

export type Hero3 = {
  _type: 'Hero3'
  subtitle?: string
  title?: string
  MediaObject?: MediaObject
  SectionSettings?: SectionSettings
  design?: Design
}

export type Hero2 = {
  _type: 'Hero2'
  title?: string
  MediaObject?: MediaObject
  SectionSettings?: SectionSettings
  design?: Design
}

export type Gallery = {
  _type: 'Gallery'
  images?: Array<{
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
    _key: string
  }>
  design?: Design
  SectionSettings?: SectionSettings
}

export type EventType = {
  _type: 'EventType'
  heading?: string
  view?: 'manual' | 'newest' | 'all'
  events?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'event'
  }>
  amount?: number
  design?: Design
  SectionSettings?: SectionSettings
}

export type EmployeesType = {
  _type: 'EmployeesType'
  heading?: string
  view?: 'manual' | 'department' | 'all'
  employees?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'employee'
  }>
  department?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'position'
  }>
  design?: Design
  SectionSettings?: SectionSettings
}

export type CallToAction2 = {
  _type: 'CallToAction2'
  heading?: string
  links: Array<
    {
      _key: string
    } & Link
  >
  design?: Design
  SectionSettings?: SectionSettings
}

export type CallToAction = {
  _type: 'CallToAction'
  callToActions?: Array<{
    heading?: string
    subheading?: string
    link: Link
    MediaObject?: MediaObject
    _type: 'callToAction'
    _key: string
  }>
  design?: Design
  SectionSettings?: SectionSettings
}

export type ArticlesType = {
  _type: 'ArticlesType'
  heading?: string
  link?: Link
  view?: 'manual' | 'newest' | 'all'
  articles?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'article'
  }>
  amount?: number
  design?: Design
  SectionSettings?: SectionSettings
}

export type SectionSettings = {
  _type: 'SectionSettings'
  anchor?: Slug
}

export type Design = {
  _type: 'design'
  padding?: Padding
  color?: Color
}

export type TextBlock = {
  _type: 'textBlock'
  body?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<
      {
        _key: string
      } & Link
    >
    level?: number
    _type: 'block'
    _key: string
  }>
}

export type Heading = {
  _type: 'heading'
  text?: string
  tag?: 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'span'
  size?: 'xl' | 'lg' | 'md' | 'sm' | 'xs'
}

export type Figure = {
  _type: 'figure'
  asset?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
  }
  media?: unknown
  hotspot?: SanityImageHotspot
  crop?: SanityImageCrop
  alt?: string
  caption?: string
}

export type Button = {
  _type: 'button'
  link?: Link
  style?: 'primary' | 'secondary' | 'ghost'
}

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>
    text?: string
    _type: 'span'
    _key: string
  }>
  style?: 'normal' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
  listItem?: 'bullet' | 'number'
  markDefs?: Array<
    {
      _key: string
    } & Link
  >
  level?: number
  _type: 'block'
  _key: string
}>

export type Accordion = {
  _type: 'accordion'
  accordions?: Array<{
    title?: string
    body?: BlockContent
    unfloded?: boolean
    _type: 'accordionObject'
    _key: string
  }>
  turnIntoStructuredData?: boolean
}

export type IconPicker = {
  _type: 'IconPicker'
  icon?:
    | 'facebook'
    | 'instagram'
    | 'linkedin'
    | 'twitter'
    | 'github'
    | 'google'
    | 'youtube'
    | 'apple'
    | 'snapchat'
    | 'pinterest'
    | 'figma'
    | 'dribble'
    | 'reddit'
    | 'discord'
    | 'tiktok'
    | 'clubhouse'
    | 'slack'
}

export type Redirect = {
  _id: string
  _type: 'redirect'
  _createdAt: string
  _updatedAt: string
  _rev: string
  subLinks?: Array<{
    source?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'page'
    }
    sourceUrl?: Slug
    isInternal?: boolean
    destinationUrl?: Slug
    destinationPage?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'page'
    }
    _key: string
  }>
}

export type Position = {
  _id: string
  _type: 'position'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
}

export type Employee = {
  _id: string
  _type: 'employee'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  email?: string
  phone?: string
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  employeePosition?: {
    simplePosition?: boolean
    position?: string
    stilling?: Array<{
      _ref: string
      _type: 'reference'
      _weak?: boolean
      _key: string
      [internalGroqTypeReferenceTo]?: 'position'
    }>
  }
}

export type MediaTag = {
  _id: string
  _type: 'media.tag'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: Slug
}

export type TranslationMetadata = {
  _id: string
  _type: 'translation.metadata'
  _createdAt: string
  _updatedAt: string
  _rev: string
  translations?: Array<
    {
      _key: string
    } & InternationalizedArrayReferenceValue
  >
  schemaTypes?: Array<string>
}

export type InternationalizedArrayReferenceValue = {
  _type: 'internationalizedArrayReferenceValue'
  value?:
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'page'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'navigation'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'footer'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'settings'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'article'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'event'
      }
}

export type Event = {
  _id: string
  _type: 'event'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug: Slug
  locale?: string
  mainImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  description?: string
  date?: string
  pageBuilder?: PageBuilder
  seoGroup?: SeoGroup
}

export type Article = {
  _id: string
  _type: 'article'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug: Slug
  locale?: string
  category?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'category'
  }
  mainImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  date?: string
  body?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  seoGroup?: SeoGroup
}

export type Category = {
  _id: string
  _type: 'category'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title: string
}

export type Settings = {
  _id: string
  _type: 'settings'
  _createdAt: string
  _updatedAt: string
  _rev: string
  siteTitle?: string
  locale?: string
  siteDescription?: string
  headScripts?: string
  bodyScripts?: string
  footerScripts?: string
  googleTagManager?: {
    id?: string
    verification?: string
  }
}

export type Footer = {
  _id: string
  _type: 'footer'
  _createdAt: string
  _updatedAt: string
  _rev: string
  locale?: string
  object?: {
    companyName?: string
    adressBook?: {
      street?: string
      zip?: string
    }
    telephone?: string
    email?: string
    cvr?: string
  }
  social?: Array<{
    platform?:
      | 'facebook'
      | 'instagram'
      | 'linkedin'
      | 'twitter'
      | 'github'
      | 'google'
      | 'youtube'
      | 'apple'
      | 'snapchat'
      | 'pinterest'
      | 'figma'
      | 'dribble'
      | 'reddit'
      | 'discord'
      | 'tiktok'
      | 'clubhouse'
      | 'slack'
    url?: string
    _key: string
  }>
  openingHours?: Array<{
    day?: 'mandag' | 'tirsdag' | 'onsdag' | 'torsdag' | 'fredag' | 'l\xF8rdag' | 's\xF8ndag'
    hours?: string
    _key: string
  }>
}

export type Navigation = {
  _id: string
  _type: 'navigation'
  _createdAt: string
  _updatedAt: string
  _rev: string
  locale?: string
  links?: Array<{
    link?: Link
    subLinks?: Array<
      {
        _key: string
      } & Link
    >
    _type: 'links'
    _key: string
  }>
}

export type Page = {
  _id: string
  _type: 'page'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  locale?: string
  slug: Slug
  mainImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  pageBuilder?: PageBuilder
  seoGroup?: SeoGroup
}

export type SeoGroup = {
  _type: 'seoGroup'
  seoTitle?: string
  seoDescription?: string
  seoImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  radioField?: 'public' | 'private' | 'hidden'
}

export type MediaObject = {
  _type: 'MediaObject'
  media?: {
    select?: 'image' | 'video' | 'vimeo'
    imageObject?: {
      image?: {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
      }
    }
    videoObject?: {
      video?: {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.fileAsset'
        }
        media?: unknown
        _type: 'file'
      }
      image?: {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
      }
    }
    vimeoObject?: {
      vimeo: string
    }
  }
}

export type Link = {
  _type: 'link'
  text?: string
  type: string
  internalLink?:
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'page'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'event'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'article'
      }
  url?: string
  email?: string
  file?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.fileAsset'
    }
    media?: unknown
    _type: 'file'
  }
  phone?: string
  label?: string
  value?: string
  blank?: boolean
  anchor?: string
  parameters?: string
}

export type SanityFileAsset = {
  _id: string
  _type: 'sanity.fileAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type SanityImageCrop = {
  _type: 'sanity.imageCrop'
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot'
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageAsset = {
  _id: string
  _type: 'sanity.imageAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData'
  name?: string
  id?: string
  url?: string
}

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata'
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type Slug = {
  _type: 'slug'
  current: string
  source?: string
}

export type InternationalizedArrayReference = Array<
  {
    _key: string
  } & InternationalizedArrayReferenceValue
>

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | Geopoint
  | Media
  | Padding
  | Color
  | Video
  | TextWithIllustration
  | TextContainer
  | PageBuilder
  | InnerBlocks
  | Hero
  | Form
  | ContactFormType
  | MediaType
  | LogoGallery2
  | LogoGallery
  | Hero3
  | Hero2
  | Gallery
  | EventType
  | EmployeesType
  | CallToAction2
  | CallToAction
  | ArticlesType
  | SectionSettings
  | Design
  | TextBlock
  | Heading
  | Figure
  | Button
  | BlockContent
  | Accordion
  | IconPicker
  | Redirect
  | Position
  | Employee
  | MediaTag
  | TranslationMetadata
  | InternationalizedArrayReferenceValue
  | Event
  | Article
  | Category
  | Settings
  | Footer
  | Navigation
  | Page
  | SeoGroup
  | MediaObject
  | Link
  | SanityFileAsset
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | Slug
  | InternationalizedArrayReference
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ./src/sanity/lib/sanity.queries.ts
// Variable: LOCALE_QUERY
// Query: *[(slug.current == $slug || (!defined(slug.current) && $slug == "")) && locale == $locale][0] {  "slug": slug.current,  locale,  "localeInfo": {    locale,    "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value->{      title,      _type,      "slug": slug.current,      locale    },  },}
export type LOCALE_QUERYResult =
  | {
      slug: null
      locale: null
      localeInfo: {
        locale: null
        _translations: Array<
          | {
              title: string | null
              _type: 'article'
              slug: string
              locale: string | null
            }
          | {
              title: string | null
              _type: 'event'
              slug: string
              locale: string | null
            }
          | {
              title: null
              _type: 'footer'
              slug: null
              locale: string | null
            }
          | {
              title: null
              _type: 'navigation'
              slug: null
              locale: string | null
            }
          | {
              title: string | null
              _type: 'page'
              slug: string
              locale: string | null
            }
          | {
              title: null
              _type: 'settings'
              slug: null
              locale: string | null
            }
          | null
        >
      }
    }
  | {
      slug: null
      locale: string | null
      localeInfo: {
        locale: string | null
        _translations: Array<
          | {
              title: string | null
              _type: 'article'
              slug: string
              locale: string | null
            }
          | {
              title: string | null
              _type: 'event'
              slug: string
              locale: string | null
            }
          | {
              title: null
              _type: 'footer'
              slug: null
              locale: string | null
            }
          | {
              title: null
              _type: 'navigation'
              slug: null
              locale: string | null
            }
          | {
              title: string | null
              _type: 'page'
              slug: string
              locale: string | null
            }
          | {
              title: null
              _type: 'settings'
              slug: null
              locale: string | null
            }
          | null
        >
      }
    }
  | {
      slug: string
      locale: string | null
      localeInfo: {
        locale: string | null
        _translations: Array<
          | {
              title: string | null
              _type: 'article'
              slug: string
              locale: string | null
            }
          | {
              title: string | null
              _type: 'event'
              slug: string
              locale: string | null
            }
          | {
              title: null
              _type: 'footer'
              slug: null
              locale: string | null
            }
          | {
              title: null
              _type: 'navigation'
              slug: null
              locale: string | null
            }
          | {
              title: string | null
              _type: 'page'
              slug: string
              locale: string | null
            }
          | {
              title: null
              _type: 'settings'
              slug: null
              locale: string | null
            }
          | null
        >
      }
    }
  | null
// Variable: NAVIGATION_QUERY
// Query: *[_type == "navigation" && locale == $locale][0] {  locale,  links[] {    link {      ...,      internalLink-> {        _type,        slug,        title,        locale,        "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value-> {          title,          slug,          locale,          _type        }      }    },    "links": subLinks[] {      "link": {        ...,        internalLink-> {          _type,          slug,          locale,          title,          "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value-> {            title,            slug,            locale,            _type          }        }      }    }  }}
export type NAVIGATION_QUERYResult = {
  locale: string | null
  links: Array<{
    link: {
      _type: 'link'
      text?: string
      type: string
      internalLink:
        | {
            _type: 'article'
            slug: Slug
            title: string | null
            locale: string | null
            _translations: Array<
              | {
                  title: string | null
                  slug: Slug
                  locale: string | null
                  _type: 'article'
                }
              | {
                  title: string | null
                  slug: Slug
                  locale: string | null
                  _type: 'event'
                }
              | {
                  title: null
                  slug: null
                  locale: string | null
                  _type: 'footer'
                }
              | {
                  title: null
                  slug: null
                  locale: string | null
                  _type: 'navigation'
                }
              | {
                  title: string | null
                  slug: Slug
                  locale: string | null
                  _type: 'page'
                }
              | {
                  title: null
                  slug: null
                  locale: string | null
                  _type: 'settings'
                }
              | null
            >
          }
        | {
            _type: 'event'
            slug: Slug
            title: string | null
            locale: string | null
            _translations: Array<
              | {
                  title: string | null
                  slug: Slug
                  locale: string | null
                  _type: 'article'
                }
              | {
                  title: string | null
                  slug: Slug
                  locale: string | null
                  _type: 'event'
                }
              | {
                  title: null
                  slug: null
                  locale: string | null
                  _type: 'footer'
                }
              | {
                  title: null
                  slug: null
                  locale: string | null
                  _type: 'navigation'
                }
              | {
                  title: string | null
                  slug: Slug
                  locale: string | null
                  _type: 'page'
                }
              | {
                  title: null
                  slug: null
                  locale: string | null
                  _type: 'settings'
                }
              | null
            >
          }
        | {
            _type: 'page'
            slug: Slug
            title: string | null
            locale: string | null
            _translations: Array<
              | {
                  title: string | null
                  slug: Slug
                  locale: string | null
                  _type: 'article'
                }
              | {
                  title: string | null
                  slug: Slug
                  locale: string | null
                  _type: 'event'
                }
              | {
                  title: null
                  slug: null
                  locale: string | null
                  _type: 'footer'
                }
              | {
                  title: null
                  slug: null
                  locale: string | null
                  _type: 'navigation'
                }
              | {
                  title: string | null
                  slug: Slug
                  locale: string | null
                  _type: 'page'
                }
              | {
                  title: null
                  slug: null
                  locale: string | null
                  _type: 'settings'
                }
              | null
            >
          }
        | null
      url?: string
      email?: string
      file?: {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.fileAsset'
        }
        media?: unknown
        _type: 'file'
      }
      phone?: string
      label?: string
      value?: string
      blank?: boolean
      anchor?: string
      parameters?: string
    } | null
    links: Array<{
      link: {
        _key: string
        _type: 'link'
        text?: string
        type: string
        internalLink:
          | {
              _type: 'article'
              slug: Slug
              locale: string | null
              title: string | null
              _translations: Array<
                | {
                    title: string | null
                    slug: Slug
                    locale: string | null
                    _type: 'article'
                  }
                | {
                    title: string | null
                    slug: Slug
                    locale: string | null
                    _type: 'event'
                  }
                | {
                    title: null
                    slug: null
                    locale: string | null
                    _type: 'footer'
                  }
                | {
                    title: null
                    slug: null
                    locale: string | null
                    _type: 'navigation'
                  }
                | {
                    title: string | null
                    slug: Slug
                    locale: string | null
                    _type: 'page'
                  }
                | {
                    title: null
                    slug: null
                    locale: string | null
                    _type: 'settings'
                  }
                | null
              >
            }
          | {
              _type: 'event'
              slug: Slug
              locale: string | null
              title: string | null
              _translations: Array<
                | {
                    title: string | null
                    slug: Slug
                    locale: string | null
                    _type: 'article'
                  }
                | {
                    title: string | null
                    slug: Slug
                    locale: string | null
                    _type: 'event'
                  }
                | {
                    title: null
                    slug: null
                    locale: string | null
                    _type: 'footer'
                  }
                | {
                    title: null
                    slug: null
                    locale: string | null
                    _type: 'navigation'
                  }
                | {
                    title: string | null
                    slug: Slug
                    locale: string | null
                    _type: 'page'
                  }
                | {
                    title: null
                    slug: null
                    locale: string | null
                    _type: 'settings'
                  }
                | null
              >
            }
          | {
              _type: 'page'
              slug: Slug
              locale: string | null
              title: string | null
              _translations: Array<
                | {
                    title: string | null
                    slug: Slug
                    locale: string | null
                    _type: 'article'
                  }
                | {
                    title: string | null
                    slug: Slug
                    locale: string | null
                    _type: 'event'
                  }
                | {
                    title: null
                    slug: null
                    locale: string | null
                    _type: 'footer'
                  }
                | {
                    title: null
                    slug: null
                    locale: string | null
                    _type: 'navigation'
                  }
                | {
                    title: string | null
                    slug: Slug
                    locale: string | null
                    _type: 'page'
                  }
                | {
                    title: null
                    slug: null
                    locale: string | null
                    _type: 'settings'
                  }
                | null
              >
            }
          | null
        url?: string
        email?: string
        file?: {
          asset?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'sanity.fileAsset'
          }
          media?: unknown
          _type: 'file'
        }
        phone?: string
        label?: string
        value?: string
        blank?: boolean
        anchor?: string
        parameters?: string
      }
    }> | null
  }> | null
} | null
// Variable: SEO_QUERY
// Query: // InuseseoGroup {  seoImage {    asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }  },  ...}
export type SEO_QUERYResult = never
// Variable: EVENT_QUERY
// Query: *[_type == "event" && slug.current == $slug][0] {  ...,  _type,  "localeInfo": {    locale,    "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value->{      title,      _type,      slug,      locale    },  },   // InuseseoGroup {  seoImage {    asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }  },  ...},    pageBuilder[] {      _type == 'textWithIllustration' => {    _type,    _key,    flip,    MediaObject {  media {    ...,    select,    imageObject {      image{        asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }      },    },    videoObject {  ...,  video {    asset-> {      _id,      url,      _type,      altText,      description,      title    }  },  image {    ...,      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }  }},    vimeoObject {...,}  }}  ,    design{...,},    innerBlocks[] {  ...,  _type == "button" => {    link {  ...,  internalLink-> {    _type,    slug,    title,    locale,    "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value-> {      title,      slug,      locale    }  },  file {    asset-> {      ...    }  }},    style,  },    body[] {    ...,    markDefs[] {      ...,      _type == "link" => {        ...,        internalLink-> {          _type,          slug,          title        }      }    }}},    SectionSettings{...,}  },      _type == "EventType" => {    amount,    ...,    "events": select(        view == "all" => *[_type == "event"] {      title,   "slug": slug.current,  date,  image {      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  },  },  _type,  description  },        view == "manual" => events[]->{      title,   "slug": slug.current,  date,  image {      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  },  },  _type,  description  },        view == "newest" => *[_type == "event"] | order(date desc)[0...(6)]{      title,   "slug": slug.current,  date,  image {      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  },  },  _type,  description  }    )  },      _type == "ArticlesType" => {    ...,    "articles": select(      view == "newest" => *[_type == "article"] | order(date desc)[0...24]{        title,_id,"slug": slug.current,date,"image": image.asset->url,_type      },      view == "manual" => articles[]->{        title,_id,"slug": slug.current,date,"image": image.asset->url,_type      },      view == "all" => *[_type == "article"] | order(date desc){        title,_id,"slug": slug.current,date,"image": image.asset->url,_type      }    )  },    _type == "contactFormType" => {  "heading": heading->heading,  ...,  array[] {    _key,    required,    fieldName,    placeholder,    inputType,    fieldId {      current,      _type    }  }},    _type == "hero" => {  title,   subtitle,  _type,  MediaObject {  media {    ...,    select,    imageObject {      image{        asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }      },    },    videoObject {  ...,  video {    asset-> {      _id,      url,      _type,      altText,      description,      title    }  },  image {    ...,      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }  }},    vimeoObject {...,}  }}  ,},    _type == "Hero2" => {  title,   _type,  MediaObject {  media {    ...,    select,    imageObject {      image{        asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }      },    },    videoObject {  ...,  video {    asset-> {      _id,      url,      _type,      altText,      description,      title    }  },  image {    ...,      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }  }},    vimeoObject {...,}  }}  ,  design{...,},},    _type == "Hero3" => {  title,   subtitle,  _type,  ...,  MediaObject {  media {    ...,    select,    imageObject {      image{        asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }      },    },    videoObject {  ...,  video {    asset-> {      _id,      url,      _type,      altText,      description,      title    }  },  image {    ...,      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }  }},    vimeoObject {...,}  }}  ,  design{...,},},        _type == "textContainer" => {      ...,    innerBlocks[] {  ...,  _type == "button" => {    link {  ...,  internalLink-> {    _type,    slug,    title,    locale,    "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value-> {      title,      slug,      locale    }  },  file {    asset-> {      ...    }  }},    style,  },    body[] {    ...,    markDefs[] {      ...,      _type == "link" => {        ...,        internalLink-> {          _type,          slug,          title        }      }    }}}    },      _type == 'CallToAction' => {    ...,    callToActions[] {      ...,      link {  ...,  internalLink-> {    _type,    slug,    title,    locale,    "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value-> {      title,      slug,      locale    }  },  file {    asset-> {      ...    }  }},      MediaObject {  media {    ...,    select,    imageObject {      image{        asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }      },    },    videoObject {  ...,  video {    asset-> {      _id,      url,      _type,      altText,      description,      title    }  },  image {    ...,      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }  }},    vimeoObject {...,}  }}  ,    },    design{...,},  },      _type == 'CallToAction2' => {    ...,      links[] {    url,    "url": internalLink->slug.current,    blank,    _type,    label,    type,  },    design{...,},  },      _type == "EmployeesType" => {    "departmentTitle": department[0]->title,    ...,    "employees": select(       view == "manual" => employees[]->{  title,  _createdAt,  "employeePosition": {    "stilling": employeePosition.stilling[]->{      _updatedAt, _createdAt, _rev, _type, _id, title    }  },  email,  image {          asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  },      },  _type,  phone,  _rev,  _id,  _updatedAt},        view == "all" => *[_type == "employee"] {    title,    _createdAt,    "employeePosition": {      "stilling": employeePosition.stilling[]->{        _updatedAt, _createdAt, _rev, _type, _id, title      }    },    email,    image {          asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  },      },    _type,    phone,    _rev,    _id,    _updatedAt  }    ),      "department": department[]->{    ...,    "employees": *[_type == "employee" && references(^._id)] {      title,      _createdAt,      "employeePosition": {        "stilling": employeePosition.stilling[]->{          _updatedAt, _createdAt, _rev, _type, _id, title        }      },      email,      image {          asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  },      },      _type,      phone,      _rev,      _id,      _updatedAt    }}  ,  },        _type == 'Gallery' => {    ...,    images[]{      _key,        asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  },      alt,    },  },    _type == "LogoGallery" => {  ...,  images[] {      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  },  }},        _type == 'LogoGallery2' => {    ...,    images[]{        asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }    },  },  },  image{      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }  }}
export type EVENT_QUERYResult = {
  _id: string
  _type: 'event'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug: Slug
  locale?: string
  mainImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  description?: string
  date?: string
  pageBuilder: Array<
    | {
        _key: string
        _type: 'ArticlesType'
        heading?: string
        link?: Link
        view?: 'all' | 'manual' | 'newest'
        articles: Array<{
          title: string | null
          _id: string
          slug: string
          date: string | null
          image: null
          _type: 'article'
        }> | null
        amount?: number
        design?: Design
        SectionSettings?: SectionSettings
      }
    | {
        _key: string
        _type: 'CallToAction'
        callToActions: Array<{
          heading?: string
          subheading?: string
          link: {
            _type: 'link'
            text?: string
            type: string
            internalLink:
              | {
                  _type: 'article'
                  slug: Slug
                  title: string | null
                  locale: string | null
                  _translations: Array<
                    | {
                        title: string | null
                        slug: Slug
                        locale: string | null
                      }
                    | {
                        title: null
                        slug: null
                        locale: string | null
                      }
                    | null
                  >
                }
              | {
                  _type: 'event'
                  slug: Slug
                  title: string | null
                  locale: string | null
                  _translations: Array<
                    | {
                        title: string | null
                        slug: Slug
                        locale: string | null
                      }
                    | {
                        title: null
                        slug: null
                        locale: string | null
                      }
                    | null
                  >
                }
              | {
                  _type: 'page'
                  slug: Slug
                  title: string | null
                  locale: string | null
                  _translations: Array<
                    | {
                        title: string | null
                        slug: Slug
                        locale: string | null
                      }
                    | {
                        title: null
                        slug: null
                        locale: string | null
                      }
                    | null
                  >
                }
              | null
            url?: string
            email?: string
            file: {
              asset: {
                _id: string
                _type: 'sanity.fileAsset'
                _createdAt: string
                _updatedAt: string
                _rev: string
                originalFilename?: string
                label?: string
                title?: string
                description?: string
                altText?: string
                sha1hash?: string
                extension?: string
                mimeType?: string
                size?: number
                assetId?: string
                uploadId?: string
                path?: string
                url?: string
                source?: SanityAssetSourceData
              } | null
            } | null
            phone?: string
            label?: string
            value?: string
            blank?: boolean
            anchor?: string
            parameters?: string
          }
          MediaObject: {
            media: {
              select: 'image' | 'video' | 'vimeo' | null
              imageObject: {
                image: {
                  asset: {
                    _id: string
                    url: string | null
                    _type: 'sanity.imageAsset'
                    altText: string | null
                    description: string | null
                    title: string | null
                    metadata: {
                      blurHash: string | null
                      dimensions: SanityImageDimensions | null
                    } | null
                  } | null
                  crop: {
                    top: number | null
                    left: number | null
                    bottom: number | null
                    _type: 'sanity.imageCrop'
                    right: number | null
                  } | null
                  hotspot: {
                    _type: 'sanity.imageHotspot'
                    width: number | null
                    x: number | null
                    y: number | null
                    height: number | null
                  } | null
                } | null
              } | null
              videoObject: {
                video: {
                  asset: {
                    _id: string
                    url: string | null
                    _type: 'sanity.fileAsset'
                    altText: string | null
                    description: string | null
                    title: string | null
                  } | null
                } | null
                image: {
                  asset: {
                    _id: string
                    url: string | null
                    _type: 'sanity.imageAsset'
                    altText: string | null
                    description: string | null
                    title: string | null
                    metadata: {
                      blurHash: string | null
                      dimensions: SanityImageDimensions | null
                    } | null
                  } | null
                  media?: unknown
                  hotspot: {
                    _type: 'sanity.imageHotspot'
                    width: number | null
                    x: number | null
                    y: number | null
                    height: number | null
                  } | null
                  crop: {
                    top: number | null
                    left: number | null
                    bottom: number | null
                    _type: 'sanity.imageCrop'
                    right: number | null
                  } | null
                  _type: 'image'
                } | null
              } | null
              vimeoObject: {
                vimeo: string
              } | null
            } | null
          } | null
          _type: 'callToAction'
          _key: string
        }> | null
        design: {
          _type: 'design'
          padding?: Padding
          color?: Color
        } | null
        SectionSettings?: SectionSettings
      }
    | {
        _key: string
        _type: 'CallToAction2'
        heading?: string
        links: Array<{
          url: string | null
          blank: boolean | null
          _type: 'link'
          label: string | null
          type: string
        }>
        design: {
          _type: 'design'
          padding?: Padding
          color?: Color
        } | null
        SectionSettings?: SectionSettings
      }
    | {
        heading?: Heading
        _key: string
        _type: 'contactFormType'
        array: Array<{
          _key: string
          required: boolean | null
          fieldName: string
          placeholder: string
          inputType: 'email' | 'file' | 'phone' | 'text' | 'textArea'
          fieldId: {
            current: string
            _type: 'slug'
          }
        }> | null
        design?: Design
        SectionSettings?: SectionSettings
      }
    | {
        departmentTitle: string | null
        _key: string
        _type: 'EmployeesType'
        heading?: string
        view?: 'all' | 'department' | 'manual'
        employees: Array<{
          title: string | null
          _createdAt: string
          employeePosition: {
            stilling: Array<{
              _updatedAt: string
              _createdAt: string
              _rev: string
              _type: 'position'
              _id: string
              title: string | null
            }> | null
          }
          email: string | null
          image: {
            asset: {
              _id: string
              url: string | null
              _type: 'sanity.imageAsset'
              altText: string | null
              description: string | null
              title: string | null
              metadata: {
                blurHash: string | null
                dimensions: SanityImageDimensions | null
              } | null
            } | null
            crop: {
              top: number | null
              left: number | null
              bottom: number | null
              _type: 'sanity.imageCrop'
              right: number | null
            } | null
            hotspot: {
              _type: 'sanity.imageHotspot'
              width: number | null
              x: number | null
              y: number | null
              height: number | null
            } | null
          } | null
          _type: 'employee'
          phone: string | null
          _rev: string
          _id: string
          _updatedAt: string
        }> | null
        department: Array<{
          _id: string
          _type: 'position'
          _createdAt: string
          _updatedAt: string
          _rev: string
          title?: string
          employees: Array<{
            title: string | null
            _createdAt: string
            employeePosition: {
              stilling: Array<{
                _updatedAt: string
                _createdAt: string
                _rev: string
                _type: 'position'
                _id: string
                title: string | null
              }> | null
            }
            email: string | null
            image: {
              asset: {
                _id: string
                url: string | null
                _type: 'sanity.imageAsset'
                altText: string | null
                description: string | null
                title: string | null
                metadata: {
                  blurHash: string | null
                  dimensions: SanityImageDimensions | null
                } | null
              } | null
              crop: {
                top: number | null
                left: number | null
                bottom: number | null
                _type: 'sanity.imageCrop'
                right: number | null
              } | null
              hotspot: {
                _type: 'sanity.imageHotspot'
                width: number | null
                x: number | null
                y: number | null
                height: number | null
              } | null
            } | null
            _type: 'employee'
            phone: string | null
            _rev: string
            _id: string
            _updatedAt: string
          }>
        }> | null
        design?: Design
        SectionSettings?: SectionSettings
      }
    | {
        amount?: number
        _key: string
        _type: 'EventType'
        heading?: string
        view?: 'all' | 'manual' | 'newest'
        events: Array<{
          title: string | null
          slug: string
          date: string | null
          image: null
          _type: 'event'
          description: string | null
        }> | null
        design?: Design
        SectionSettings?: SectionSettings
      }
    | {
        _key: string
        _type: 'Gallery'
        images: Array<{
          _key: string
          asset: {
            _id: string
            url: string | null
            _type: 'sanity.imageAsset'
            altText: string | null
            description: string | null
            title: string | null
            metadata: {
              blurHash: string | null
              dimensions: SanityImageDimensions | null
            } | null
          } | null
          crop: {
            top: number | null
            left: number | null
            bottom: number | null
            _type: 'sanity.imageCrop'
            right: number | null
          } | null
          hotspot: {
            _type: 'sanity.imageHotspot'
            width: number | null
            x: number | null
            y: number | null
            height: number | null
          } | null
          alt: string | null
        }> | null
        design?: Design
        SectionSettings?: SectionSettings
      }
    | {
        title?: string
        subtitle?: string
        _type: 'Hero3'
        _key: string
        MediaObject: {
          media: {
            select: 'image' | 'video' | 'vimeo' | null
            imageObject: {
              image: {
                asset: {
                  _id: string
                  url: string | null
                  _type: 'sanity.imageAsset'
                  altText: string | null
                  description: string | null
                  title: string | null
                  metadata: {
                    blurHash: string | null
                    dimensions: SanityImageDimensions | null
                  } | null
                } | null
                crop: {
                  top: number | null
                  left: number | null
                  bottom: number | null
                  _type: 'sanity.imageCrop'
                  right: number | null
                } | null
                hotspot: {
                  _type: 'sanity.imageHotspot'
                  width: number | null
                  x: number | null
                  y: number | null
                  height: number | null
                } | null
              } | null
            } | null
            videoObject: {
              video: {
                asset: {
                  _id: string
                  url: string | null
                  _type: 'sanity.fileAsset'
                  altText: string | null
                  description: string | null
                  title: string | null
                } | null
              } | null
              image: {
                asset: {
                  _id: string
                  url: string | null
                  _type: 'sanity.imageAsset'
                  altText: string | null
                  description: string | null
                  title: string | null
                  metadata: {
                    blurHash: string | null
                    dimensions: SanityImageDimensions | null
                  } | null
                } | null
                media?: unknown
                hotspot: {
                  _type: 'sanity.imageHotspot'
                  width: number | null
                  x: number | null
                  y: number | null
                  height: number | null
                } | null
                crop: {
                  top: number | null
                  left: number | null
                  bottom: number | null
                  _type: 'sanity.imageCrop'
                  right: number | null
                } | null
                _type: 'image'
              } | null
            } | null
            vimeoObject: {
              vimeo: string
            } | null
          } | null
        } | null
        SectionSettings?: SectionSettings
        design: {
          _type: 'design'
          padding?: Padding
          color?: Color
        } | null
      }
    | {
        _key: string
        _type: 'LogoGallery'
        title?: string
        images: Array<{
          asset: {
            _id: string
            url: string | null
            _type: 'sanity.imageAsset'
            altText: string | null
            description: string | null
            title: string | null
            metadata: {
              blurHash: string | null
              dimensions: SanityImageDimensions | null
            } | null
          } | null
          crop: {
            top: number | null
            left: number | null
            bottom: number | null
            _type: 'sanity.imageCrop'
            right: number | null
          } | null
          hotspot: {
            _type: 'sanity.imageHotspot'
            width: number | null
            x: number | null
            y: number | null
            height: number | null
          } | null
        }> | null
      }
    | {
        _key: string
        _type: 'LogoGallery2'
        title?: string
        images: Array<{
          asset: {
            _id: string
            url: string | null
            _type: 'sanity.imageAsset'
            altText: string | null
            description: string | null
            title: string | null
            metadata: {
              blurHash: string | null
              dimensions: SanityImageDimensions | null
            } | null
          } | null
          crop: {
            top: number | null
            left: number | null
            bottom: number | null
            _type: 'sanity.imageCrop'
            right: number | null
          } | null
          hotspot: {
            _type: 'sanity.imageHotspot'
            width: number | null
            x: number | null
            y: number | null
            height: number | null
          } | null
        }> | null
      }
    | {
        _key: string
        _type: 'textContainer'
        innerBlocks: Array<
          | {
              _key: string
              _type: 'accordion'
              accordions?: Array<{
                title?: string
                body?: BlockContent
                unfloded?: boolean
                _type: 'accordionObject'
                _key: string
              }>
              turnIntoStructuredData?: boolean
              body: null
            }
          | {
              _key: string
              _type: 'button'
              link: {
                _type: 'link'
                text?: string
                type: string
                internalLink:
                  | {
                      _type: 'article'
                      slug: Slug
                      title: string | null
                      locale: string | null
                      _translations: Array<
                        | {
                            title: string | null
                            slug: Slug
                            locale: string | null
                          }
                        | {
                            title: null
                            slug: null
                            locale: string | null
                          }
                        | null
                      >
                    }
                  | {
                      _type: 'event'
                      slug: Slug
                      title: string | null
                      locale: string | null
                      _translations: Array<
                        | {
                            title: string | null
                            slug: Slug
                            locale: string | null
                          }
                        | {
                            title: null
                            slug: null
                            locale: string | null
                          }
                        | null
                      >
                    }
                  | {
                      _type: 'page'
                      slug: Slug
                      title: string | null
                      locale: string | null
                      _translations: Array<
                        | {
                            title: string | null
                            slug: Slug
                            locale: string | null
                          }
                        | {
                            title: null
                            slug: null
                            locale: string | null
                          }
                        | null
                      >
                    }
                  | null
                url?: string
                email?: string
                file: {
                  asset: {
                    _id: string
                    _type: 'sanity.fileAsset'
                    _createdAt: string
                    _updatedAt: string
                    _rev: string
                    originalFilename?: string
                    label?: string
                    title?: string
                    description?: string
                    altText?: string
                    sha1hash?: string
                    extension?: string
                    mimeType?: string
                    size?: number
                    assetId?: string
                    uploadId?: string
                    path?: string
                    url?: string
                    source?: SanityAssetSourceData
                  } | null
                } | null
                phone?: string
                label?: string
                value?: string
                blank?: boolean
                anchor?: string
                parameters?: string
              } | null
              style: 'ghost' | 'primary' | 'secondary' | null
              body: null
            }
          | {
              _key: string
              _type: 'heading'
              text?: string
              tag?: 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'span'
              size?: 'lg' | 'md' | 'sm' | 'xl' | 'xs'
              body: null
            }
          | {
              _key: string
              _type: 'textBlock'
              body: Array<{
                children?: Array<{
                  marks?: Array<string>
                  text?: string
                  _type: 'span'
                  _key: string
                }>
                style?: 'blockquote' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
                listItem?: 'bullet' | 'number'
                markDefs: Array<{
                  _key: string
                  _type: 'link'
                  text?: string
                  type: string
                  internalLink:
                    | {
                        _type: 'article'
                        slug: Slug
                        title: string | null
                      }
                    | {
                        _type: 'event'
                        slug: Slug
                        title: string | null
                      }
                    | {
                        _type: 'page'
                        slug: Slug
                        title: string | null
                      }
                    | null
                  url?: string
                  email?: string
                  file?: {
                    asset?: {
                      _ref: string
                      _type: 'reference'
                      _weak?: boolean
                      [internalGroqTypeReferenceTo]?: 'sanity.fileAsset'
                    }
                    media?: unknown
                    _type: 'file'
                  }
                  phone?: string
                  label?: string
                  value?: string
                  blank?: boolean
                  anchor?: string
                  parameters?: string
                }> | null
                level?: number
                _type: 'block'
                _key: string
              }> | null
            }
        > | null
        design?: Design
        SectionSettings?: SectionSettings
      }
    | {
        _type: 'textWithIllustration'
        _key: string
        flip: boolean | null
        MediaObject: {
          media: {
            select: 'image' | 'video' | 'vimeo' | null
            imageObject: {
              image: {
                asset: {
                  _id: string
                  url: string | null
                  _type: 'sanity.imageAsset'
                  altText: string | null
                  description: string | null
                  title: string | null
                  metadata: {
                    blurHash: string | null
                    dimensions: SanityImageDimensions | null
                  } | null
                } | null
                crop: {
                  top: number | null
                  left: number | null
                  bottom: number | null
                  _type: 'sanity.imageCrop'
                  right: number | null
                } | null
                hotspot: {
                  _type: 'sanity.imageHotspot'
                  width: number | null
                  x: number | null
                  y: number | null
                  height: number | null
                } | null
              } | null
            } | null
            videoObject: {
              video: {
                asset: {
                  _id: string
                  url: string | null
                  _type: 'sanity.fileAsset'
                  altText: string | null
                  description: string | null
                  title: string | null
                } | null
              } | null
              image: {
                asset: {
                  _id: string
                  url: string | null
                  _type: 'sanity.imageAsset'
                  altText: string | null
                  description: string | null
                  title: string | null
                  metadata: {
                    blurHash: string | null
                    dimensions: SanityImageDimensions | null
                  } | null
                } | null
                media?: unknown
                hotspot: {
                  _type: 'sanity.imageHotspot'
                  width: number | null
                  x: number | null
                  y: number | null
                  height: number | null
                } | null
                crop: {
                  top: number | null
                  left: number | null
                  bottom: number | null
                  _type: 'sanity.imageCrop'
                  right: number | null
                } | null
                _type: 'image'
              } | null
            } | null
            vimeoObject: {
              vimeo: string
            } | null
          } | null
        } | null
        design: {
          _type: 'design'
          padding?: Padding
          color?: Color
        } | null
        innerBlocks: Array<
          | {
              _key: string
              _type: 'accordion'
              accordions?: Array<{
                title?: string
                body?: BlockContent
                unfloded?: boolean
                _type: 'accordionObject'
                _key: string
              }>
              turnIntoStructuredData?: boolean
              body: null
            }
          | {
              _key: string
              _type: 'button'
              link: {
                _type: 'link'
                text?: string
                type: string
                internalLink:
                  | {
                      _type: 'article'
                      slug: Slug
                      title: string | null
                      locale: string | null
                      _translations: Array<
                        | {
                            title: string | null
                            slug: Slug
                            locale: string | null
                          }
                        | {
                            title: null
                            slug: null
                            locale: string | null
                          }
                        | null
                      >
                    }
                  | {
                      _type: 'event'
                      slug: Slug
                      title: string | null
                      locale: string | null
                      _translations: Array<
                        | {
                            title: string | null
                            slug: Slug
                            locale: string | null
                          }
                        | {
                            title: null
                            slug: null
                            locale: string | null
                          }
                        | null
                      >
                    }
                  | {
                      _type: 'page'
                      slug: Slug
                      title: string | null
                      locale: string | null
                      _translations: Array<
                        | {
                            title: string | null
                            slug: Slug
                            locale: string | null
                          }
                        | {
                            title: null
                            slug: null
                            locale: string | null
                          }
                        | null
                      >
                    }
                  | null
                url?: string
                email?: string
                file: {
                  asset: {
                    _id: string
                    _type: 'sanity.fileAsset'
                    _createdAt: string
                    _updatedAt: string
                    _rev: string
                    originalFilename?: string
                    label?: string
                    title?: string
                    description?: string
                    altText?: string
                    sha1hash?: string
                    extension?: string
                    mimeType?: string
                    size?: number
                    assetId?: string
                    uploadId?: string
                    path?: string
                    url?: string
                    source?: SanityAssetSourceData
                  } | null
                } | null
                phone?: string
                label?: string
                value?: string
                blank?: boolean
                anchor?: string
                parameters?: string
              } | null
              style: 'ghost' | 'primary' | 'secondary' | null
              body: null
            }
          | {
              _key: string
              _type: 'heading'
              text?: string
              tag?: 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'span'
              size?: 'lg' | 'md' | 'sm' | 'xl' | 'xs'
              body: null
            }
          | {
              _key: string
              _type: 'textBlock'
              body: Array<{
                children?: Array<{
                  marks?: Array<string>
                  text?: string
                  _type: 'span'
                  _key: string
                }>
                style?: 'blockquote' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
                listItem?: 'bullet' | 'number'
                markDefs: Array<{
                  _key: string
                  _type: 'link'
                  text?: string
                  type: string
                  internalLink:
                    | {
                        _type: 'article'
                        slug: Slug
                        title: string | null
                      }
                    | {
                        _type: 'event'
                        slug: Slug
                        title: string | null
                      }
                    | {
                        _type: 'page'
                        slug: Slug
                        title: string | null
                      }
                    | null
                  url?: string
                  email?: string
                  file?: {
                    asset?: {
                      _ref: string
                      _type: 'reference'
                      _weak?: boolean
                      [internalGroqTypeReferenceTo]?: 'sanity.fileAsset'
                    }
                    media?: unknown
                    _type: 'file'
                  }
                  phone?: string
                  label?: string
                  value?: string
                  blank?: boolean
                  anchor?: string
                  parameters?: string
                }> | null
                level?: number
                _type: 'block'
                _key: string
              }> | null
            }
        > | null
        SectionSettings: {
          _type: 'SectionSettings'
          anchor?: Slug
        } | null
      }
    | {
        title: string | null
        subtitle: string | null
        _type: 'hero'
        MediaObject: {
          media: {
            select: 'image' | 'video' | 'vimeo' | null
            imageObject: {
              image: {
                asset: {
                  _id: string
                  url: string | null
                  _type: 'sanity.imageAsset'
                  altText: string | null
                  description: string | null
                  title: string | null
                  metadata: {
                    blurHash: string | null
                    dimensions: SanityImageDimensions | null
                  } | null
                } | null
                crop: {
                  top: number | null
                  left: number | null
                  bottom: number | null
                  _type: 'sanity.imageCrop'
                  right: number | null
                } | null
                hotspot: {
                  _type: 'sanity.imageHotspot'
                  width: number | null
                  x: number | null
                  y: number | null
                  height: number | null
                } | null
              } | null
            } | null
            videoObject: {
              video: {
                asset: {
                  _id: string
                  url: string | null
                  _type: 'sanity.fileAsset'
                  altText: string | null
                  description: string | null
                  title: string | null
                } | null
              } | null
              image: {
                asset: {
                  _id: string
                  url: string | null
                  _type: 'sanity.imageAsset'
                  altText: string | null
                  description: string | null
                  title: string | null
                  metadata: {
                    blurHash: string | null
                    dimensions: SanityImageDimensions | null
                  } | null
                } | null
                media?: unknown
                hotspot: {
                  _type: 'sanity.imageHotspot'
                  width: number | null
                  x: number | null
                  y: number | null
                  height: number | null
                } | null
                crop: {
                  top: number | null
                  left: number | null
                  bottom: number | null
                  _type: 'sanity.imageCrop'
                  right: number | null
                } | null
                _type: 'image'
              } | null
            } | null
            vimeoObject: {
              vimeo: string
            } | null
          } | null
        } | null
      }
    | {
        title: string | null
        _type: 'Hero2'
        MediaObject: {
          media: {
            select: 'image' | 'video' | 'vimeo' | null
            imageObject: {
              image: {
                asset: {
                  _id: string
                  url: string | null
                  _type: 'sanity.imageAsset'
                  altText: string | null
                  description: string | null
                  title: string | null
                  metadata: {
                    blurHash: string | null
                    dimensions: SanityImageDimensions | null
                  } | null
                } | null
                crop: {
                  top: number | null
                  left: number | null
                  bottom: number | null
                  _type: 'sanity.imageCrop'
                  right: number | null
                } | null
                hotspot: {
                  _type: 'sanity.imageHotspot'
                  width: number | null
                  x: number | null
                  y: number | null
                  height: number | null
                } | null
              } | null
            } | null
            videoObject: {
              video: {
                asset: {
                  _id: string
                  url: string | null
                  _type: 'sanity.fileAsset'
                  altText: string | null
                  description: string | null
                  title: string | null
                } | null
              } | null
              image: {
                asset: {
                  _id: string
                  url: string | null
                  _type: 'sanity.imageAsset'
                  altText: string | null
                  description: string | null
                  title: string | null
                  metadata: {
                    blurHash: string | null
                    dimensions: SanityImageDimensions | null
                  } | null
                } | null
                media?: unknown
                hotspot: {
                  _type: 'sanity.imageHotspot'
                  width: number | null
                  x: number | null
                  y: number | null
                  height: number | null
                } | null
                crop: {
                  top: number | null
                  left: number | null
                  bottom: number | null
                  _type: 'sanity.imageCrop'
                  right: number | null
                } | null
                _type: 'image'
              } | null
            } | null
            vimeoObject: {
              vimeo: string
            } | null
          } | null
        } | null
        design: {
          _type: 'design'
          padding?: Padding
          color?: Color
        } | null
      }
    | {}
  > | null
  seoGroup: {
    seoImage?: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
    }
    _type: 'seoGroup'
    seoTitle?: string
    seoDescription?: string
    radioField?: 'hidden' | 'private' | 'public'
  } | null
  localeInfo: {
    locale: string | null
    _translations: Array<
      | {
          title: string | null
          _type: 'article'
          slug: Slug
          locale: string | null
        }
      | {
          title: string | null
          _type: 'event'
          slug: Slug
          locale: string | null
        }
      | {
          title: null
          _type: 'footer'
          slug: null
          locale: string | null
        }
      | {
          title: null
          _type: 'navigation'
          slug: null
          locale: string | null
        }
      | {
          title: string | null
          _type: 'page'
          slug: Slug
          locale: string | null
        }
      | {
          title: null
          _type: 'settings'
          slug: null
          locale: string | null
        }
      | null
    >
  }
  image: null
} | null
// Variable: PAGE_QUERY
// Query: *[_type == "page" && slug.current == $slug && locale == $locale][0] {  ...,  "localeInfo": {    locale,    "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value->{      title,      _type,      slug,      locale    },  },  _type,   // InuseseoGroup {  seoImage {    asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }  },  ...},    pageBuilder[] {      _type == 'textWithIllustration' => {    _type,    _key,    flip,    MediaObject {  media {    ...,    select,    imageObject {      image{        asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }      },    },    videoObject {  ...,  video {    asset-> {      _id,      url,      _type,      altText,      description,      title    }  },  image {    ...,      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }  }},    vimeoObject {...,}  }}  ,    design{...,},    innerBlocks[] {  ...,  _type == "button" => {    link {  ...,  internalLink-> {    _type,    slug,    title,    locale,    "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value-> {      title,      slug,      locale    }  },  file {    asset-> {      ...    }  }},    style,  },    body[] {    ...,    markDefs[] {      ...,      _type == "link" => {        ...,        internalLink-> {          _type,          slug,          title        }      }    }}},    SectionSettings{...,}  },      _type == "EventType" => {    amount,    ...,    "events": select(        view == "all" => *[_type == "event"] {      title,   "slug": slug.current,  date,  image {      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  },  },  _type,  description  },        view == "manual" => events[]->{      title,   "slug": slug.current,  date,  image {      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  },  },  _type,  description  },        view == "newest" => *[_type == "event"] | order(date desc)[0...(6)]{      title,   "slug": slug.current,  date,  image {      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  },  },  _type,  description  }    )  },      _type == "ArticlesType" => {    ...,    "articles": select(      view == "newest" => *[_type == "article"] | order(date desc)[0...24]{        title,_id,"slug": slug.current,date,"image": image.asset->url,_type      },      view == "manual" => articles[]->{        title,_id,"slug": slug.current,date,"image": image.asset->url,_type      },      view == "all" => *[_type == "article"] | order(date desc){        title,_id,"slug": slug.current,date,"image": image.asset->url,_type      }    )  },    _type == "contactFormType" => {  "heading": heading->heading,  ...,  array[] {    _key,    required,    fieldName,    placeholder,    inputType,    fieldId {      current,      _type    }  }},    _type == "hero" => {  title,   subtitle,  _type,  MediaObject {  media {    ...,    select,    imageObject {      image{        asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }      },    },    videoObject {  ...,  video {    asset-> {      _id,      url,      _type,      altText,      description,      title    }  },  image {    ...,      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }  }},    vimeoObject {...,}  }}  ,},    _type == "Hero2" => {  title,   _type,  MediaObject {  media {    ...,    select,    imageObject {      image{        asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }      },    },    videoObject {  ...,  video {    asset-> {      _id,      url,      _type,      altText,      description,      title    }  },  image {    ...,      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }  }},    vimeoObject {...,}  }}  ,  design{...,},},    _type == "Hero3" => {  title,   subtitle,  _type,  ...,  MediaObject {  media {    ...,    select,    imageObject {      image{        asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }      },    },    videoObject {  ...,  video {    asset-> {      _id,      url,      _type,      altText,      description,      title    }  },  image {    ...,      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }  }},    vimeoObject {...,}  }}  ,  design{...,},},        _type == "textContainer" => {      ...,    innerBlocks[] {  ...,  _type == "button" => {    link {  ...,  internalLink-> {    _type,    slug,    title,    locale,    "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value-> {      title,      slug,      locale    }  },  file {    asset-> {      ...    }  }},    style,  },    body[] {    ...,    markDefs[] {      ...,      _type == "link" => {        ...,        internalLink-> {          _type,          slug,          title        }      }    }}}    },      _type == 'CallToAction' => {    ...,    callToActions[] {      ...,      link {  ...,  internalLink-> {    _type,    slug,    title,    locale,    "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value-> {      title,      slug,      locale    }  },  file {    asset-> {      ...    }  }},      MediaObject {  media {    ...,    select,    imageObject {      image{        asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }      },    },    videoObject {  ...,  video {    asset-> {      _id,      url,      _type,      altText,      description,      title    }  },  image {    ...,      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }  }},    vimeoObject {...,}  }}  ,    },    design{...,},  },      _type == 'CallToAction2' => {    ...,      links[] {    url,    "url": internalLink->slug.current,    blank,    _type,    label,    type,  },    design{...,},  },      _type == "EmployeesType" => {    "departmentTitle": department[0]->title,    ...,    "employees": select(       view == "manual" => employees[]->{  title,  _createdAt,  "employeePosition": {    "stilling": employeePosition.stilling[]->{      _updatedAt, _createdAt, _rev, _type, _id, title    }  },  email,  image {          asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  },      },  _type,  phone,  _rev,  _id,  _updatedAt},        view == "all" => *[_type == "employee"] {    title,    _createdAt,    "employeePosition": {      "stilling": employeePosition.stilling[]->{        _updatedAt, _createdAt, _rev, _type, _id, title      }    },    email,    image {          asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  },      },    _type,    phone,    _rev,    _id,    _updatedAt  }    ),      "department": department[]->{    ...,    "employees": *[_type == "employee" && references(^._id)] {      title,      _createdAt,      "employeePosition": {        "stilling": employeePosition.stilling[]->{          _updatedAt, _createdAt, _rev, _type, _id, title        }      },      email,      image {          asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  },      },      _type,      phone,      _rev,      _id,      _updatedAt    }}  ,  },        _type == 'Gallery' => {    ...,    images[]{      _key,        asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  },      alt,    },  },    _type == "LogoGallery" => {  ...,  images[] {      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  },  }},        _type == 'LogoGallery2' => {    ...,    images[]{        asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }    },  },  },  mainImage {    ...,    asset-> {      ...,      _id,      url,      _type,      altText,      description,      title,      metadata {        blurHash,        dimensions      }    }  }}
export type PAGE_QUERYResult = {
  _id: string
  _type: 'page'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  locale?: string
  slug: Slug
  mainImage: {
    asset: {
      _id: string
      _type: 'sanity.imageAsset'
      _createdAt: string
      _updatedAt: string
      _rev: string
      originalFilename?: string
      label?: string
      title: string | null
      description: string | null
      altText: string | null
      sha1hash?: string
      extension?: string
      mimeType?: string
      size?: number
      assetId?: string
      uploadId?: string
      path?: string
      url: string | null
      metadata: {
        blurHash: string | null
        dimensions: SanityImageDimensions | null
      } | null
      source?: SanityAssetSourceData
    } | null
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  } | null
  pageBuilder: Array<
    | {
        _key: string
        _type: 'ArticlesType'
        heading?: string
        link?: Link
        view?: 'all' | 'manual' | 'newest'
        articles: Array<{
          title: string | null
          _id: string
          slug: string
          date: string | null
          image: null
          _type: 'article'
        }> | null
        amount?: number
        design?: Design
        SectionSettings?: SectionSettings
      }
    | {
        _key: string
        _type: 'CallToAction'
        callToActions: Array<{
          heading?: string
          subheading?: string
          link: {
            _type: 'link'
            text?: string
            type: string
            internalLink:
              | {
                  _type: 'article'
                  slug: Slug
                  title: string | null
                  locale: string | null
                  _translations: Array<
                    | {
                        title: string | null
                        slug: Slug
                        locale: string | null
                      }
                    | {
                        title: null
                        slug: null
                        locale: string | null
                      }
                    | null
                  >
                }
              | {
                  _type: 'event'
                  slug: Slug
                  title: string | null
                  locale: string | null
                  _translations: Array<
                    | {
                        title: string | null
                        slug: Slug
                        locale: string | null
                      }
                    | {
                        title: null
                        slug: null
                        locale: string | null
                      }
                    | null
                  >
                }
              | {
                  _type: 'page'
                  slug: Slug
                  title: string | null
                  locale: string | null
                  _translations: Array<
                    | {
                        title: string | null
                        slug: Slug
                        locale: string | null
                      }
                    | {
                        title: null
                        slug: null
                        locale: string | null
                      }
                    | null
                  >
                }
              | null
            url?: string
            email?: string
            file: {
              asset: {
                _id: string
                _type: 'sanity.fileAsset'
                _createdAt: string
                _updatedAt: string
                _rev: string
                originalFilename?: string
                label?: string
                title?: string
                description?: string
                altText?: string
                sha1hash?: string
                extension?: string
                mimeType?: string
                size?: number
                assetId?: string
                uploadId?: string
                path?: string
                url?: string
                source?: SanityAssetSourceData
              } | null
            } | null
            phone?: string
            label?: string
            value?: string
            blank?: boolean
            anchor?: string
            parameters?: string
          }
          MediaObject: {
            media: {
              select: 'image' | 'video' | 'vimeo' | null
              imageObject: {
                image: {
                  asset: {
                    _id: string
                    url: string | null
                    _type: 'sanity.imageAsset'
                    altText: string | null
                    description: string | null
                    title: string | null
                    metadata: {
                      blurHash: string | null
                      dimensions: SanityImageDimensions | null
                    } | null
                  } | null
                  crop: {
                    top: number | null
                    left: number | null
                    bottom: number | null
                    _type: 'sanity.imageCrop'
                    right: number | null
                  } | null
                  hotspot: {
                    _type: 'sanity.imageHotspot'
                    width: number | null
                    x: number | null
                    y: number | null
                    height: number | null
                  } | null
                } | null
              } | null
              videoObject: {
                video: {
                  asset: {
                    _id: string
                    url: string | null
                    _type: 'sanity.fileAsset'
                    altText: string | null
                    description: string | null
                    title: string | null
                  } | null
                } | null
                image: {
                  asset: {
                    _id: string
                    url: string | null
                    _type: 'sanity.imageAsset'
                    altText: string | null
                    description: string | null
                    title: string | null
                    metadata: {
                      blurHash: string | null
                      dimensions: SanityImageDimensions | null
                    } | null
                  } | null
                  media?: unknown
                  hotspot: {
                    _type: 'sanity.imageHotspot'
                    width: number | null
                    x: number | null
                    y: number | null
                    height: number | null
                  } | null
                  crop: {
                    top: number | null
                    left: number | null
                    bottom: number | null
                    _type: 'sanity.imageCrop'
                    right: number | null
                  } | null
                  _type: 'image'
                } | null
              } | null
              vimeoObject: {
                vimeo: string
              } | null
            } | null
          } | null
          _type: 'callToAction'
          _key: string
        }> | null
        design: {
          _type: 'design'
          padding?: Padding
          color?: Color
        } | null
        SectionSettings?: SectionSettings
      }
    | {
        _key: string
        _type: 'CallToAction2'
        heading?: string
        links: Array<{
          url: string | null
          blank: boolean | null
          _type: 'link'
          label: string | null
          type: string
        }>
        design: {
          _type: 'design'
          padding?: Padding
          color?: Color
        } | null
        SectionSettings?: SectionSettings
      }
    | {
        heading?: Heading
        _key: string
        _type: 'contactFormType'
        array: Array<{
          _key: string
          required: boolean | null
          fieldName: string
          placeholder: string
          inputType: 'email' | 'file' | 'phone' | 'text' | 'textArea'
          fieldId: {
            current: string
            _type: 'slug'
          }
        }> | null
        design?: Design
        SectionSettings?: SectionSettings
      }
    | {
        departmentTitle: string | null
        _key: string
        _type: 'EmployeesType'
        heading?: string
        view?: 'all' | 'department' | 'manual'
        employees: Array<{
          title: string | null
          _createdAt: string
          employeePosition: {
            stilling: Array<{
              _updatedAt: string
              _createdAt: string
              _rev: string
              _type: 'position'
              _id: string
              title: string | null
            }> | null
          }
          email: string | null
          image: {
            asset: {
              _id: string
              url: string | null
              _type: 'sanity.imageAsset'
              altText: string | null
              description: string | null
              title: string | null
              metadata: {
                blurHash: string | null
                dimensions: SanityImageDimensions | null
              } | null
            } | null
            crop: {
              top: number | null
              left: number | null
              bottom: number | null
              _type: 'sanity.imageCrop'
              right: number | null
            } | null
            hotspot: {
              _type: 'sanity.imageHotspot'
              width: number | null
              x: number | null
              y: number | null
              height: number | null
            } | null
          } | null
          _type: 'employee'
          phone: string | null
          _rev: string
          _id: string
          _updatedAt: string
        }> | null
        department: Array<{
          _id: string
          _type: 'position'
          _createdAt: string
          _updatedAt: string
          _rev: string
          title?: string
          employees: Array<{
            title: string | null
            _createdAt: string
            employeePosition: {
              stilling: Array<{
                _updatedAt: string
                _createdAt: string
                _rev: string
                _type: 'position'
                _id: string
                title: string | null
              }> | null
            }
            email: string | null
            image: {
              asset: {
                _id: string
                url: string | null
                _type: 'sanity.imageAsset'
                altText: string | null
                description: string | null
                title: string | null
                metadata: {
                  blurHash: string | null
                  dimensions: SanityImageDimensions | null
                } | null
              } | null
              crop: {
                top: number | null
                left: number | null
                bottom: number | null
                _type: 'sanity.imageCrop'
                right: number | null
              } | null
              hotspot: {
                _type: 'sanity.imageHotspot'
                width: number | null
                x: number | null
                y: number | null
                height: number | null
              } | null
            } | null
            _type: 'employee'
            phone: string | null
            _rev: string
            _id: string
            _updatedAt: string
          }>
        }> | null
        design?: Design
        SectionSettings?: SectionSettings
      }
    | {
        amount?: number
        _key: string
        _type: 'EventType'
        heading?: string
        view?: 'all' | 'manual' | 'newest'
        events: Array<{
          title: string | null
          slug: string
          date: string | null
          image: null
          _type: 'event'
          description: string | null
        }> | null
        design?: Design
        SectionSettings?: SectionSettings
      }
    | {
        _key: string
        _type: 'Gallery'
        images: Array<{
          _key: string
          asset: {
            _id: string
            url: string | null
            _type: 'sanity.imageAsset'
            altText: string | null
            description: string | null
            title: string | null
            metadata: {
              blurHash: string | null
              dimensions: SanityImageDimensions | null
            } | null
          } | null
          crop: {
            top: number | null
            left: number | null
            bottom: number | null
            _type: 'sanity.imageCrop'
            right: number | null
          } | null
          hotspot: {
            _type: 'sanity.imageHotspot'
            width: number | null
            x: number | null
            y: number | null
            height: number | null
          } | null
          alt: string | null
        }> | null
        design?: Design
        SectionSettings?: SectionSettings
      }
    | {
        title?: string
        subtitle?: string
        _type: 'Hero3'
        _key: string
        MediaObject: {
          media: {
            select: 'image' | 'video' | 'vimeo' | null
            imageObject: {
              image: {
                asset: {
                  _id: string
                  url: string | null
                  _type: 'sanity.imageAsset'
                  altText: string | null
                  description: string | null
                  title: string | null
                  metadata: {
                    blurHash: string | null
                    dimensions: SanityImageDimensions | null
                  } | null
                } | null
                crop: {
                  top: number | null
                  left: number | null
                  bottom: number | null
                  _type: 'sanity.imageCrop'
                  right: number | null
                } | null
                hotspot: {
                  _type: 'sanity.imageHotspot'
                  width: number | null
                  x: number | null
                  y: number | null
                  height: number | null
                } | null
              } | null
            } | null
            videoObject: {
              video: {
                asset: {
                  _id: string
                  url: string | null
                  _type: 'sanity.fileAsset'
                  altText: string | null
                  description: string | null
                  title: string | null
                } | null
              } | null
              image: {
                asset: {
                  _id: string
                  url: string | null
                  _type: 'sanity.imageAsset'
                  altText: string | null
                  description: string | null
                  title: string | null
                  metadata: {
                    blurHash: string | null
                    dimensions: SanityImageDimensions | null
                  } | null
                } | null
                media?: unknown
                hotspot: {
                  _type: 'sanity.imageHotspot'
                  width: number | null
                  x: number | null
                  y: number | null
                  height: number | null
                } | null
                crop: {
                  top: number | null
                  left: number | null
                  bottom: number | null
                  _type: 'sanity.imageCrop'
                  right: number | null
                } | null
                _type: 'image'
              } | null
            } | null
            vimeoObject: {
              vimeo: string
            } | null
          } | null
        } | null
        SectionSettings?: SectionSettings
        design: {
          _type: 'design'
          padding?: Padding
          color?: Color
        } | null
      }
    | {
        _key: string
        _type: 'LogoGallery'
        title?: string
        images: Array<{
          asset: {
            _id: string
            url: string | null
            _type: 'sanity.imageAsset'
            altText: string | null
            description: string | null
            title: string | null
            metadata: {
              blurHash: string | null
              dimensions: SanityImageDimensions | null
            } | null
          } | null
          crop: {
            top: number | null
            left: number | null
            bottom: number | null
            _type: 'sanity.imageCrop'
            right: number | null
          } | null
          hotspot: {
            _type: 'sanity.imageHotspot'
            width: number | null
            x: number | null
            y: number | null
            height: number | null
          } | null
        }> | null
      }
    | {
        _key: string
        _type: 'LogoGallery2'
        title?: string
        images: Array<{
          asset: {
            _id: string
            url: string | null
            _type: 'sanity.imageAsset'
            altText: string | null
            description: string | null
            title: string | null
            metadata: {
              blurHash: string | null
              dimensions: SanityImageDimensions | null
            } | null
          } | null
          crop: {
            top: number | null
            left: number | null
            bottom: number | null
            _type: 'sanity.imageCrop'
            right: number | null
          } | null
          hotspot: {
            _type: 'sanity.imageHotspot'
            width: number | null
            x: number | null
            y: number | null
            height: number | null
          } | null
        }> | null
      }
    | {
        _key: string
        _type: 'textContainer'
        innerBlocks: Array<
          | {
              _key: string
              _type: 'accordion'
              accordions?: Array<{
                title?: string
                body?: BlockContent
                unfloded?: boolean
                _type: 'accordionObject'
                _key: string
              }>
              turnIntoStructuredData?: boolean
              body: null
            }
          | {
              _key: string
              _type: 'button'
              link: {
                _type: 'link'
                text?: string
                type: string
                internalLink:
                  | {
                      _type: 'article'
                      slug: Slug
                      title: string | null
                      locale: string | null
                      _translations: Array<
                        | {
                            title: string | null
                            slug: Slug
                            locale: string | null
                          }
                        | {
                            title: null
                            slug: null
                            locale: string | null
                          }
                        | null
                      >
                    }
                  | {
                      _type: 'event'
                      slug: Slug
                      title: string | null
                      locale: string | null
                      _translations: Array<
                        | {
                            title: string | null
                            slug: Slug
                            locale: string | null
                          }
                        | {
                            title: null
                            slug: null
                            locale: string | null
                          }
                        | null
                      >
                    }
                  | {
                      _type: 'page'
                      slug: Slug
                      title: string | null
                      locale: string | null
                      _translations: Array<
                        | {
                            title: string | null
                            slug: Slug
                            locale: string | null
                          }
                        | {
                            title: null
                            slug: null
                            locale: string | null
                          }
                        | null
                      >
                    }
                  | null
                url?: string
                email?: string
                file: {
                  asset: {
                    _id: string
                    _type: 'sanity.fileAsset'
                    _createdAt: string
                    _updatedAt: string
                    _rev: string
                    originalFilename?: string
                    label?: string
                    title?: string
                    description?: string
                    altText?: string
                    sha1hash?: string
                    extension?: string
                    mimeType?: string
                    size?: number
                    assetId?: string
                    uploadId?: string
                    path?: string
                    url?: string
                    source?: SanityAssetSourceData
                  } | null
                } | null
                phone?: string
                label?: string
                value?: string
                blank?: boolean
                anchor?: string
                parameters?: string
              } | null
              style: 'ghost' | 'primary' | 'secondary' | null
              body: null
            }
          | {
              _key: string
              _type: 'heading'
              text?: string
              tag?: 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'span'
              size?: 'lg' | 'md' | 'sm' | 'xl' | 'xs'
              body: null
            }
          | {
              _key: string
              _type: 'textBlock'
              body: Array<{
                children?: Array<{
                  marks?: Array<string>
                  text?: string
                  _type: 'span'
                  _key: string
                }>
                style?: 'blockquote' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
                listItem?: 'bullet' | 'number'
                markDefs: Array<{
                  _key: string
                  _type: 'link'
                  text?: string
                  type: string
                  internalLink:
                    | {
                        _type: 'article'
                        slug: Slug
                        title: string | null
                      }
                    | {
                        _type: 'event'
                        slug: Slug
                        title: string | null
                      }
                    | {
                        _type: 'page'
                        slug: Slug
                        title: string | null
                      }
                    | null
                  url?: string
                  email?: string
                  file?: {
                    asset?: {
                      _ref: string
                      _type: 'reference'
                      _weak?: boolean
                      [internalGroqTypeReferenceTo]?: 'sanity.fileAsset'
                    }
                    media?: unknown
                    _type: 'file'
                  }
                  phone?: string
                  label?: string
                  value?: string
                  blank?: boolean
                  anchor?: string
                  parameters?: string
                }> | null
                level?: number
                _type: 'block'
                _key: string
              }> | null
            }
        > | null
        design?: Design
        SectionSettings?: SectionSettings
      }
    | {
        _type: 'textWithIllustration'
        _key: string
        flip: boolean | null
        MediaObject: {
          media: {
            select: 'image' | 'video' | 'vimeo' | null
            imageObject: {
              image: {
                asset: {
                  _id: string
                  url: string | null
                  _type: 'sanity.imageAsset'
                  altText: string | null
                  description: string | null
                  title: string | null
                  metadata: {
                    blurHash: string | null
                    dimensions: SanityImageDimensions | null
                  } | null
                } | null
                crop: {
                  top: number | null
                  left: number | null
                  bottom: number | null
                  _type: 'sanity.imageCrop'
                  right: number | null
                } | null
                hotspot: {
                  _type: 'sanity.imageHotspot'
                  width: number | null
                  x: number | null
                  y: number | null
                  height: number | null
                } | null
              } | null
            } | null
            videoObject: {
              video: {
                asset: {
                  _id: string
                  url: string | null
                  _type: 'sanity.fileAsset'
                  altText: string | null
                  description: string | null
                  title: string | null
                } | null
              } | null
              image: {
                asset: {
                  _id: string
                  url: string | null
                  _type: 'sanity.imageAsset'
                  altText: string | null
                  description: string | null
                  title: string | null
                  metadata: {
                    blurHash: string | null
                    dimensions: SanityImageDimensions | null
                  } | null
                } | null
                media?: unknown
                hotspot: {
                  _type: 'sanity.imageHotspot'
                  width: number | null
                  x: number | null
                  y: number | null
                  height: number | null
                } | null
                crop: {
                  top: number | null
                  left: number | null
                  bottom: number | null
                  _type: 'sanity.imageCrop'
                  right: number | null
                } | null
                _type: 'image'
              } | null
            } | null
            vimeoObject: {
              vimeo: string
            } | null
          } | null
        } | null
        design: {
          _type: 'design'
          padding?: Padding
          color?: Color
        } | null
        innerBlocks: Array<
          | {
              _key: string
              _type: 'accordion'
              accordions?: Array<{
                title?: string
                body?: BlockContent
                unfloded?: boolean
                _type: 'accordionObject'
                _key: string
              }>
              turnIntoStructuredData?: boolean
              body: null
            }
          | {
              _key: string
              _type: 'button'
              link: {
                _type: 'link'
                text?: string
                type: string
                internalLink:
                  | {
                      _type: 'article'
                      slug: Slug
                      title: string | null
                      locale: string | null
                      _translations: Array<
                        | {
                            title: string | null
                            slug: Slug
                            locale: string | null
                          }
                        | {
                            title: null
                            slug: null
                            locale: string | null
                          }
                        | null
                      >
                    }
                  | {
                      _type: 'event'
                      slug: Slug
                      title: string | null
                      locale: string | null
                      _translations: Array<
                        | {
                            title: string | null
                            slug: Slug
                            locale: string | null
                          }
                        | {
                            title: null
                            slug: null
                            locale: string | null
                          }
                        | null
                      >
                    }
                  | {
                      _type: 'page'
                      slug: Slug
                      title: string | null
                      locale: string | null
                      _translations: Array<
                        | {
                            title: string | null
                            slug: Slug
                            locale: string | null
                          }
                        | {
                            title: null
                            slug: null
                            locale: string | null
                          }
                        | null
                      >
                    }
                  | null
                url?: string
                email?: string
                file: {
                  asset: {
                    _id: string
                    _type: 'sanity.fileAsset'
                    _createdAt: string
                    _updatedAt: string
                    _rev: string
                    originalFilename?: string
                    label?: string
                    title?: string
                    description?: string
                    altText?: string
                    sha1hash?: string
                    extension?: string
                    mimeType?: string
                    size?: number
                    assetId?: string
                    uploadId?: string
                    path?: string
                    url?: string
                    source?: SanityAssetSourceData
                  } | null
                } | null
                phone?: string
                label?: string
                value?: string
                blank?: boolean
                anchor?: string
                parameters?: string
              } | null
              style: 'ghost' | 'primary' | 'secondary' | null
              body: null
            }
          | {
              _key: string
              _type: 'heading'
              text?: string
              tag?: 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'span'
              size?: 'lg' | 'md' | 'sm' | 'xl' | 'xs'
              body: null
            }
          | {
              _key: string
              _type: 'textBlock'
              body: Array<{
                children?: Array<{
                  marks?: Array<string>
                  text?: string
                  _type: 'span'
                  _key: string
                }>
                style?: 'blockquote' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
                listItem?: 'bullet' | 'number'
                markDefs: Array<{
                  _key: string
                  _type: 'link'
                  text?: string
                  type: string
                  internalLink:
                    | {
                        _type: 'article'
                        slug: Slug
                        title: string | null
                      }
                    | {
                        _type: 'event'
                        slug: Slug
                        title: string | null
                      }
                    | {
                        _type: 'page'
                        slug: Slug
                        title: string | null
                      }
                    | null
                  url?: string
                  email?: string
                  file?: {
                    asset?: {
                      _ref: string
                      _type: 'reference'
                      _weak?: boolean
                      [internalGroqTypeReferenceTo]?: 'sanity.fileAsset'
                    }
                    media?: unknown
                    _type: 'file'
                  }
                  phone?: string
                  label?: string
                  value?: string
                  blank?: boolean
                  anchor?: string
                  parameters?: string
                }> | null
                level?: number
                _type: 'block'
                _key: string
              }> | null
            }
        > | null
        SectionSettings: {
          _type: 'SectionSettings'
          anchor?: Slug
        } | null
      }
    | {
        title: string | null
        subtitle: string | null
        _type: 'hero'
        MediaObject: {
          media: {
            select: 'image' | 'video' | 'vimeo' | null
            imageObject: {
              image: {
                asset: {
                  _id: string
                  url: string | null
                  _type: 'sanity.imageAsset'
                  altText: string | null
                  description: string | null
                  title: string | null
                  metadata: {
                    blurHash: string | null
                    dimensions: SanityImageDimensions | null
                  } | null
                } | null
                crop: {
                  top: number | null
                  left: number | null
                  bottom: number | null
                  _type: 'sanity.imageCrop'
                  right: number | null
                } | null
                hotspot: {
                  _type: 'sanity.imageHotspot'
                  width: number | null
                  x: number | null
                  y: number | null
                  height: number | null
                } | null
              } | null
            } | null
            videoObject: {
              video: {
                asset: {
                  _id: string
                  url: string | null
                  _type: 'sanity.fileAsset'
                  altText: string | null
                  description: string | null
                  title: string | null
                } | null
              } | null
              image: {
                asset: {
                  _id: string
                  url: string | null
                  _type: 'sanity.imageAsset'
                  altText: string | null
                  description: string | null
                  title: string | null
                  metadata: {
                    blurHash: string | null
                    dimensions: SanityImageDimensions | null
                  } | null
                } | null
                media?: unknown
                hotspot: {
                  _type: 'sanity.imageHotspot'
                  width: number | null
                  x: number | null
                  y: number | null
                  height: number | null
                } | null
                crop: {
                  top: number | null
                  left: number | null
                  bottom: number | null
                  _type: 'sanity.imageCrop'
                  right: number | null
                } | null
                _type: 'image'
              } | null
            } | null
            vimeoObject: {
              vimeo: string
            } | null
          } | null
        } | null
      }
    | {
        title: string | null
        _type: 'Hero2'
        MediaObject: {
          media: {
            select: 'image' | 'video' | 'vimeo' | null
            imageObject: {
              image: {
                asset: {
                  _id: string
                  url: string | null
                  _type: 'sanity.imageAsset'
                  altText: string | null
                  description: string | null
                  title: string | null
                  metadata: {
                    blurHash: string | null
                    dimensions: SanityImageDimensions | null
                  } | null
                } | null
                crop: {
                  top: number | null
                  left: number | null
                  bottom: number | null
                  _type: 'sanity.imageCrop'
                  right: number | null
                } | null
                hotspot: {
                  _type: 'sanity.imageHotspot'
                  width: number | null
                  x: number | null
                  y: number | null
                  height: number | null
                } | null
              } | null
            } | null
            videoObject: {
              video: {
                asset: {
                  _id: string
                  url: string | null
                  _type: 'sanity.fileAsset'
                  altText: string | null
                  description: string | null
                  title: string | null
                } | null
              } | null
              image: {
                asset: {
                  _id: string
                  url: string | null
                  _type: 'sanity.imageAsset'
                  altText: string | null
                  description: string | null
                  title: string | null
                  metadata: {
                    blurHash: string | null
                    dimensions: SanityImageDimensions | null
                  } | null
                } | null
                media?: unknown
                hotspot: {
                  _type: 'sanity.imageHotspot'
                  width: number | null
                  x: number | null
                  y: number | null
                  height: number | null
                } | null
                crop: {
                  top: number | null
                  left: number | null
                  bottom: number | null
                  _type: 'sanity.imageCrop'
                  right: number | null
                } | null
                _type: 'image'
              } | null
            } | null
            vimeoObject: {
              vimeo: string
            } | null
          } | null
        } | null
        design: {
          _type: 'design'
          padding?: Padding
          color?: Color
        } | null
      }
    | {}
  > | null
  seoGroup: {
    seoImage?: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
    }
    _type: 'seoGroup'
    seoTitle?: string
    seoDescription?: string
    radioField?: 'hidden' | 'private' | 'public'
  } | null
  localeInfo: {
    locale: string | null
    _translations: Array<
      | {
          title: string | null
          _type: 'article'
          slug: Slug
          locale: string | null
        }
      | {
          title: string | null
          _type: 'event'
          slug: Slug
          locale: string | null
        }
      | {
          title: null
          _type: 'footer'
          slug: null
          locale: string | null
        }
      | {
          title: null
          _type: 'navigation'
          slug: null
          locale: string | null
        }
      | {
          title: string | null
          _type: 'page'
          slug: Slug
          locale: string | null
        }
      | {
          title: null
          _type: 'settings'
          slug: null
          locale: string | null
        }
      | null
    >
  }
} | null
// Variable: ARTICLE_QUERY
// Query: *[_type == "article" && slug.current == $slug][0] {  ...,  "localeInfo": {    locale,    "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value->{      title,      _type,      slug,      locale    },  },  _type,   // InuseseoGroup {  seoImage {    asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }  },  ...},    pageBuilder[] {      _type == 'textWithIllustration' => {    _type,    _key,    flip,    MediaObject {  media {    ...,    select,    imageObject {      image{        asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }      },    },    videoObject {  ...,  video {    asset-> {      _id,      url,      _type,      altText,      description,      title    }  },  image {    ...,      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }  }},    vimeoObject {...,}  }}  ,    design{...,},    innerBlocks[] {  ...,  _type == "button" => {    link {  ...,  internalLink-> {    _type,    slug,    title,    locale,    "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value-> {      title,      slug,      locale    }  },  file {    asset-> {      ...    }  }},    style,  },    body[] {    ...,    markDefs[] {      ...,      _type == "link" => {        ...,        internalLink-> {          _type,          slug,          title        }      }    }}},    SectionSettings{...,}  },      _type == "EventType" => {    amount,    ...,    "events": select(        view == "all" => *[_type == "event"] {      title,   "slug": slug.current,  date,  image {      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  },  },  _type,  description  },        view == "manual" => events[]->{      title,   "slug": slug.current,  date,  image {      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  },  },  _type,  description  },        view == "newest" => *[_type == "event"] | order(date desc)[0...(6)]{      title,   "slug": slug.current,  date,  image {      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  },  },  _type,  description  }    )  },      _type == "ArticlesType" => {    ...,    "articles": select(      view == "newest" => *[_type == "article"] | order(date desc)[0...24]{        title,_id,"slug": slug.current,date,"image": image.asset->url,_type      },      view == "manual" => articles[]->{        title,_id,"slug": slug.current,date,"image": image.asset->url,_type      },      view == "all" => *[_type == "article"] | order(date desc){        title,_id,"slug": slug.current,date,"image": image.asset->url,_type      }    )  },    _type == "contactFormType" => {  "heading": heading->heading,  ...,  array[] {    _key,    required,    fieldName,    placeholder,    inputType,    fieldId {      current,      _type    }  }},    _type == "hero" => {  title,   subtitle,  _type,  MediaObject {  media {    ...,    select,    imageObject {      image{        asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }      },    },    videoObject {  ...,  video {    asset-> {      _id,      url,      _type,      altText,      description,      title    }  },  image {    ...,      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }  }},    vimeoObject {...,}  }}  ,},    _type == "Hero2" => {  title,   _type,  MediaObject {  media {    ...,    select,    imageObject {      image{        asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }      },    },    videoObject {  ...,  video {    asset-> {      _id,      url,      _type,      altText,      description,      title    }  },  image {    ...,      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }  }},    vimeoObject {...,}  }}  ,  design{...,},},    _type == "Hero3" => {  title,   subtitle,  _type,  ...,  MediaObject {  media {    ...,    select,    imageObject {      image{        asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }      },    },    videoObject {  ...,  video {    asset-> {      _id,      url,      _type,      altText,      description,      title    }  },  image {    ...,      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }  }},    vimeoObject {...,}  }}  ,  design{...,},},        _type == "textContainer" => {      ...,    innerBlocks[] {  ...,  _type == "button" => {    link {  ...,  internalLink-> {    _type,    slug,    title,    locale,    "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value-> {      title,      slug,      locale    }  },  file {    asset-> {      ...    }  }},    style,  },    body[] {    ...,    markDefs[] {      ...,      _type == "link" => {        ...,        internalLink-> {          _type,          slug,          title        }      }    }}}    },      _type == 'CallToAction' => {    ...,    callToActions[] {      ...,      link {  ...,  internalLink-> {    _type,    slug,    title,    locale,    "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value-> {      title,      slug,      locale    }  },  file {    asset-> {      ...    }  }},      MediaObject {  media {    ...,    select,    imageObject {      image{        asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }      },    },    videoObject {  ...,  video {    asset-> {      _id,      url,      _type,      altText,      description,      title    }  },  image {    ...,      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }  }},    vimeoObject {...,}  }}  ,    },    design{...,},  },      _type == 'CallToAction2' => {    ...,      links[] {    url,    "url": internalLink->slug.current,    blank,    _type,    label,    type,  },    design{...,},  },      _type == "EmployeesType" => {    "departmentTitle": department[0]->title,    ...,    "employees": select(       view == "manual" => employees[]->{  title,  _createdAt,  "employeePosition": {    "stilling": employeePosition.stilling[]->{      _updatedAt, _createdAt, _rev, _type, _id, title    }  },  email,  image {          asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  },      },  _type,  phone,  _rev,  _id,  _updatedAt},        view == "all" => *[_type == "employee"] {    title,    _createdAt,    "employeePosition": {      "stilling": employeePosition.stilling[]->{        _updatedAt, _createdAt, _rev, _type, _id, title      }    },    email,    image {          asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  },      },    _type,    phone,    _rev,    _id,    _updatedAt  }    ),      "department": department[]->{    ...,    "employees": *[_type == "employee" && references(^._id)] {      title,      _createdAt,      "employeePosition": {        "stilling": employeePosition.stilling[]->{          _updatedAt, _createdAt, _rev, _type, _id, title        }      },      email,      image {          asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  },      },      _type,      phone,      _rev,      _id,      _updatedAt    }}  ,  },        _type == 'Gallery' => {    ...,    images[]{      _key,        asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  },      alt,    },  },    _type == "LogoGallery" => {  ...,  images[] {      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  },  }},        _type == 'LogoGallery2' => {    ...,    images[]{        asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }    },  },  },  image {    ...,    asset-> {      ...,      _id,      url,      _type,      altText,      description,      title,      metadata {        blurHash,        dimensions      }    }  }}
export type ARTICLE_QUERYResult = {
  _id: string
  _type: 'article'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug: Slug
  locale?: string
  category?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'category'
  }
  mainImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  date?: string
  body?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  seoGroup: {
    seoImage?: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
    }
    _type: 'seoGroup'
    seoTitle?: string
    seoDescription?: string
    radioField?: 'hidden' | 'private' | 'public'
  } | null
  localeInfo: {
    locale: string | null
    _translations: Array<
      | {
          title: string | null
          _type: 'article'
          slug: Slug
          locale: string | null
        }
      | {
          title: string | null
          _type: 'event'
          slug: Slug
          locale: string | null
        }
      | {
          title: null
          _type: 'footer'
          slug: null
          locale: string | null
        }
      | {
          title: null
          _type: 'navigation'
          slug: null
          locale: string | null
        }
      | {
          title: string | null
          _type: 'page'
          slug: Slug
          locale: string | null
        }
      | {
          title: null
          _type: 'settings'
          slug: null
          locale: string | null
        }
      | null
    >
  }
  pageBuilder: null
  image: null
} | null
// Variable: FOOTER_QUERY
// Query: *[_type == "footer" && locale == $locale][0] {      title,      locale,      logo {         asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }      },      object {        companyName,        adressBook{          street,          zip        },        telephone,        email,        cvr      },      social[] {        platform,        url      },      openingHours[] {        day,        hours      }    }
export type FOOTER_QUERYResult = {
  title: null
  locale: string | null
  logo: null
  object: {
    companyName: string | null
    adressBook: {
      street: string | null
      zip: string | null
    } | null
    telephone: string | null
    email: string | null
    cvr: string | null
  } | null
  social: Array<{
    platform:
      | 'apple'
      | 'clubhouse'
      | 'discord'
      | 'dribble'
      | 'facebook'
      | 'figma'
      | 'github'
      | 'google'
      | 'instagram'
      | 'linkedin'
      | 'pinterest'
      | 'reddit'
      | 'slack'
      | 'snapchat'
      | 'tiktok'
      | 'twitter'
      | 'youtube'
      | null
    url: string | null
  }> | null
  openingHours: Array<{
    day: 'fredag' | 'l\xF8rdag' | 'mandag' | 'onsdag' | 's\xF8ndag' | 'tirsdag' | 'torsdag' | null
    hours: string | null
  }> | null
} | null
// Variable: SITE_SETTINGS_QUERY
// Query: *[_type == "settings" && locale == $locale][0] {  ...,  bodyScripts,  siteTitle,  siteDescription,  footerScripts,  headScripts,  googleTagManager {    id,    verification,  }}
export type SITE_SETTINGS_QUERYResult = {
  _id: string
  _type: 'settings'
  _createdAt: string
  _updatedAt: string
  _rev: string
  siteTitle: string | null
  locale?: string
  siteDescription: string | null
  headScripts: string | null
  bodyScripts: string | null
  footerScripts: string | null
  googleTagManager: {
    id: string | null
    verification: string | null
  } | null
} | null

// Source: ./src/sanity/queries/atoms/Button.query.ts
// Variable: ButtonQuery
// Query: link {  ...,  internalLink-> {    _type,    slug,    title,    locale,    "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value-> {      title,      slug,      locale    }  },  file {    asset-> {      ...    }  }}
export type ButtonQueryResult = never

// Source: ./src/sanity/queries/atoms/Design.query.ts
// Variable: DesignQuery
// Query: design{...,}
export type DesignQueryResult = never

// Source: ./src/sanity/queries/atoms/Medie.query.ts
// Variable: videoObject
// Query: videoObject {  ...,  video {    asset->{      _id,      url,      _type,      altText,      description,      title,    }  },  image {      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  },  }}
export type VideoObjectResult = never

// Source: ./src/sanity/queries/atoms/Redirect.query.ts
// Variable: redirectQuery
// Query: *[_type == 'redirect']{    subLinks[]{      "destination": destinationPage->{        ...,      },          "source": source->{        ...,      },    }  }
export type RedirectQueryResult = Array<{
  subLinks: Array<{
    destination: {
      _id: string
      _type: 'page'
      _createdAt: string
      _updatedAt: string
      _rev: string
      title?: string
      locale?: string
      slug: Slug
      mainImage?: {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
      }
      pageBuilder?: PageBuilder
      seoGroup?: SeoGroup
    } | null
    source: {
      _id: string
      _type: 'page'
      _createdAt: string
      _updatedAt: string
      _rev: string
      title?: string
      locale?: string
      slug: Slug
      mainImage?: {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
      }
      pageBuilder?: PageBuilder
      seoGroup?: SeoGroup
    } | null
  }> | null
}>

// Source: ./src/sanity/queries/atoms/VimeoObject.query.ts
// Variable: vimeoObject
// Query: vimeoObject {...,}
export type VimeoObjectResult = never

// Source: ./src/sanity/queries/atoms/isPortableText.query.ts
// Variable: isPortableTextQuery
// Query: body[] {    ...,    markDefs[] {      ...,      _type == "link" => {        ...,        internalLink-> {          _type,          slug,          title        }      }    }}
export type IsPortableTextQueryResult = never

// Source: ./src/sanity/queries/molecules/InnerBlocks.query.ts
// Variable: InnerBlocksQuery
// Query: innerBlocks[] {  ...,  _type == "button" => {    link {  ...,  internalLink-> {    _type,    slug,    title,    locale,    "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value-> {      title,      slug,      locale    }  },  file {    asset-> {      ...    }  }},    style,  },    body[] {    ...,    markDefs[] {      ...,      _type == "link" => {        ...,        internalLink-> {          _type,          slug,          title        }      }    }}}
export type InnerBlocksQueryResult = never

// Source: ./src/sanity/queries/molecules/MediaObject.query.ts
// Variable: MediaObjectQuery
// Query: MediaObject {  media {    ...,    select,    imageObject {      image{        asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }      },    },    videoObject {  ...,  video {    asset-> {      _id,      url,      _type,      altText,      description,      title    }  },  image {    ...,      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }  }},    vimeoObject {...,}  }}
export type MediaObjectQueryResult = never

// Source: ./src/sanity/queries/organisms/PageBuilder.query.ts
// Variable: pageBuilderQuery
// Query: pageBuilder[] {      _type == 'textWithIllustration' => {    _type,    _key,    flip,    MediaObject {  media {    ...,    select,    imageObject {      image{        asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }      },    },    videoObject {  ...,  video {    asset-> {      _id,      url,      _type,      altText,      description,      title    }  },  image {    ...,      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }  }},    vimeoObject {...,}  }}  ,    design{...,},    innerBlocks[] {  ...,  _type == "button" => {    link {  ...,  internalLink-> {    _type,    slug,    title,    locale,    "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value-> {      title,      slug,      locale    }  },  file {    asset-> {      ...    }  }},    style,  },    body[] {    ...,    markDefs[] {      ...,      _type == "link" => {        ...,        internalLink-> {          _type,          slug,          title        }      }    }}},    SectionSettings{...,}  },      _type == "EventType" => {    amount,    ...,    "events": select(        view == "all" => *[_type == "event"] {      title,   "slug": slug.current,  date,  image {      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  },  },  _type,  description  },        view == "manual" => events[]->{      title,   "slug": slug.current,  date,  image {      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  },  },  _type,  description  },        view == "newest" => *[_type == "event"] | order(date desc)[0...(6)]{      title,   "slug": slug.current,  date,  image {      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  },  },  _type,  description  }    )  },      _type == "ArticlesType" => {    ...,    "articles": select(      view == "newest" => *[_type == "article"] | order(date desc)[0...24]{        title,_id,"slug": slug.current,date,"image": image.asset->url,_type      },      view == "manual" => articles[]->{        title,_id,"slug": slug.current,date,"image": image.asset->url,_type      },      view == "all" => *[_type == "article"] | order(date desc){        title,_id,"slug": slug.current,date,"image": image.asset->url,_type      }    )  },    _type == "contactFormType" => {  "heading": heading->heading,  ...,  array[] {    _key,    required,    fieldName,    placeholder,    inputType,    fieldId {      current,      _type    }  }},    _type == "hero" => {  title,   subtitle,  _type,  MediaObject {  media {    ...,    select,    imageObject {      image{        asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }      },    },    videoObject {  ...,  video {    asset-> {      _id,      url,      _type,      altText,      description,      title    }  },  image {    ...,      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }  }},    vimeoObject {...,}  }}  ,},    _type == "Hero2" => {  title,   _type,  MediaObject {  media {    ...,    select,    imageObject {      image{        asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }      },    },    videoObject {  ...,  video {    asset-> {      _id,      url,      _type,      altText,      description,      title    }  },  image {    ...,      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }  }},    vimeoObject {...,}  }}  ,  design{...,},},    _type == "Hero3" => {  title,   subtitle,  _type,  ...,  MediaObject {  media {    ...,    select,    imageObject {      image{        asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }      },    },    videoObject {  ...,  video {    asset-> {      _id,      url,      _type,      altText,      description,      title    }  },  image {    ...,      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }  }},    vimeoObject {...,}  }}  ,  design{...,},},        _type == "textContainer" => {      ...,    innerBlocks[] {  ...,  _type == "button" => {    link {  ...,  internalLink-> {    _type,    slug,    title,    locale,    "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value-> {      title,      slug,      locale    }  },  file {    asset-> {      ...    }  }},    style,  },    body[] {    ...,    markDefs[] {      ...,      _type == "link" => {        ...,        internalLink-> {          _type,          slug,          title        }      }    }}}    },      _type == 'CallToAction' => {    ...,    callToActions[] {      ...,      link {  ...,  internalLink-> {    _type,    slug,    title,    locale,    "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value-> {      title,      slug,      locale    }  },  file {    asset-> {      ...    }  }},      MediaObject {  media {    ...,    select,    imageObject {      image{        asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }      },    },    videoObject {  ...,  video {    asset-> {      _id,      url,      _type,      altText,      description,      title    }  },  image {    ...,      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }  }},    vimeoObject {...,}  }}  ,    },    design{...,},  },      _type == 'CallToAction2' => {    ...,      links[] {    url,    "url": internalLink->slug.current,    blank,    _type,    label,    type,  },    design{...,},  },      _type == "EmployeesType" => {    "departmentTitle": department[0]->title,    ...,    "employees": select(       view == "manual" => employees[]->{  title,  _createdAt,  "employeePosition": {    "stilling": employeePosition.stilling[]->{      _updatedAt, _createdAt, _rev, _type, _id, title    }  },  email,  image {          asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  },      },  _type,  phone,  _rev,  _id,  _updatedAt},        view == "all" => *[_type == "employee"] {    title,    _createdAt,    "employeePosition": {      "stilling": employeePosition.stilling[]->{        _updatedAt, _createdAt, _rev, _type, _id, title      }    },    email,    image {          asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  },      },    _type,    phone,    _rev,    _id,    _updatedAt  }    ),      "department": department[]->{    ...,    "employees": *[_type == "employee" && references(^._id)] {      title,      _createdAt,      "employeePosition": {        "stilling": employeePosition.stilling[]->{          _updatedAt, _createdAt, _rev, _type, _id, title        }      },      email,      image {          asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  },      },      _type,      phone,      _rev,      _id,      _updatedAt    }}  ,  },        _type == 'Gallery' => {    ...,    images[]{      _key,        asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  },      alt,    },  },    _type == "LogoGallery" => {  ...,  images[] {      asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  },  }},        _type == 'LogoGallery2' => {    ...,    images[]{        asset-> {    _id,    url,    _type,    altText,    description,    title,    metadata {      blurHash,      dimensions    }  },  crop {    top,    left,    bottom,    _type,    right  },  hotspot {    _type,    width,    x,    y,    height  }    },  },  }
export type PageBuilderQueryResult = never

// Query TypeMap
import '@sanity/client'
declare module '@sanity/client' {
  interface SanityQueries {
    '\n*[(slug.current == $slug || (!defined(slug.current) && $slug == "")) && locale == $locale][0] {\n  "slug": slug.current,\n  locale,\n  "localeInfo": {\n    locale,\n    "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value->{\n      title,\n      _type,\n      "slug": slug.current,\n      locale\n    },\n  },\n}\n': LOCALE_QUERYResult
    '\n*[_type == "navigation" && locale == $locale][0] {\n  locale,\n  links[] {\n    link {\n      ...,\n      internalLink-> {\n        _type,\n        slug,\n        title,\n        locale,\n        "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value-> {\n          title,\n          slug,\n          locale,\n          _type\n        }\n      }\n    },\n    "links": subLinks[] {\n      "link": {\n        ...,\n        internalLink-> {\n          _type,\n          slug,\n          locale,\n          title,\n          "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value-> {\n            title,\n            slug,\n            locale,\n            _type\n          }\n        }\n      }\n    }\n  }\n}\n\n': NAVIGATION_QUERYResult
    ' // Inuse\nseoGroup {\n  seoImage {\n    asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n  },\n  ...\n}\n': SEO_QUERYResult
    '\n*[_type == "event" && slug.current == $slug][0] {\n  ...,\n  _type,\n  "localeInfo": {\n    locale,\n    "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value->{\n      title,\n      _type,\n      slug,\n      locale\n    },\n  },\n   // Inuse\nseoGroup {\n  seoImage {\n    asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n  },\n  ...\n}\n,\n  \n  pageBuilder[] {\n    \n  _type == \'textWithIllustration\' => {\n    _type,\n    _key,\n    flip,\n    \nMediaObject {\n  media {\n    ...,\n    select,\n    imageObject {\n      image{\n      \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n      },\n    },\n    \nvideoObject {\n  ...,\n  video {\n    asset-> {\n      _id,\n      url,\n      _type,\n      altText,\n      description,\n      title\n    }\n  },\n  image {\n    ...,\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n  }\n}\n,\n    \nvimeoObject {...,}\n  }\n}\n\n  ,\n    design{...,},\n    \ninnerBlocks[] {\n  ...,\n  _type == "button" => {\n    \nlink {\n  ...,\n  internalLink-> {\n    _type,\n    slug,\n    title,\n    locale,\n    "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value-> {\n      title,\n      slug,\n      locale\n    }\n  },\n  file {\n    asset-> {\n      ...\n    }\n  }\n}\n,\n    style,\n  },\n  \n  body[] {\n    ...,\n    markDefs[] {\n      ...,\n      _type == "link" => {\n        ...,\n        internalLink-> {\n          _type,\n          slug,\n          title\n        }\n      }\n    }\n}\n\n}\n\n,\n    SectionSettings{...,}\n  }\n,\n    \n  _type == "EventType" => {\n    amount,\n    ...,\n    "events": select(\n      \n  view == "all" => *[_type == "event"] {\n    \n  title, \n  "slug": slug.current,\n  date,\n  image {\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n,\n  },\n  _type,\n  description\n\n  }\n,\n      \n  view == "manual" => events[]->{\n    \n  title, \n  "slug": slug.current,\n  date,\n  image {\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n,\n  },\n  _type,\n  description\n\n  }\n,\n      \n  view == "newest" => *[_type == "event"] | order(date desc)[0...(6)]{\n    \n  title, \n  "slug": slug.current,\n  date,\n  image {\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n,\n  },\n  _type,\n  description\n\n  }\n\n    )\n  }\n,\n    \n  _type == "ArticlesType" => {\n    ...,\n    "articles": select(\n      view == "newest" => *[_type == "article"] | order(date desc)[0...24]{\n        \ntitle,\n_id,\n"slug": slug.current,\ndate,\n"image": image.asset->url,\n_type\n\n      },\n      view == "manual" => articles[]->{\n        \ntitle,\n_id,\n"slug": slug.current,\ndate,\n"image": image.asset->url,\n_type\n\n      },\n      view == "all" => *[_type == "article"] | order(date desc){\n        \ntitle,\n_id,\n"slug": slug.current,\ndate,\n"image": image.asset->url,\n_type\n\n      }\n    )\n  }\n,\n    \n_type == "contactFormType" => {\n  "heading": heading->heading,\n  ...,\n  array[] {\n    _key,\n    required,\n    fieldName,\n    placeholder,\n    inputType,\n    fieldId {\n      current,\n      _type\n    }\n  }\n}\n,\n    \n_type == "hero" => {\n  title, \n  subtitle,\n  _type,\n  \nMediaObject {\n  media {\n    ...,\n    select,\n    imageObject {\n      image{\n      \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n      },\n    },\n    \nvideoObject {\n  ...,\n  video {\n    asset-> {\n      _id,\n      url,\n      _type,\n      altText,\n      description,\n      title\n    }\n  },\n  image {\n    ...,\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n  }\n}\n,\n    \nvimeoObject {...,}\n  }\n}\n\n  ,\n}\n,\n    \n_type == "Hero2" => {\n  title, \n  _type,\n  \nMediaObject {\n  media {\n    ...,\n    select,\n    imageObject {\n      image{\n      \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n      },\n    },\n    \nvideoObject {\n  ...,\n  video {\n    asset-> {\n      _id,\n      url,\n      _type,\n      altText,\n      description,\n      title\n    }\n  },\n  image {\n    ...,\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n  }\n}\n,\n    \nvimeoObject {...,}\n  }\n}\n\n  ,\n  \ndesign{...,}\n,\n}\n,\n    \n_type == "Hero3" => {\n  title, \n  subtitle,\n  _type,\n  ...,\n  \nMediaObject {\n  media {\n    ...,\n    select,\n    imageObject {\n      image{\n      \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n      },\n    },\n    \nvideoObject {\n  ...,\n  video {\n    asset-> {\n      _id,\n      url,\n      _type,\n      altText,\n      description,\n      title\n    }\n  },\n  image {\n    ...,\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n  }\n}\n,\n    \nvimeoObject {...,}\n  }\n}\n\n  ,\n  \ndesign{...,}\n,\n}\n,\n    \n    _type == "textContainer" => {\n      ...,\n    \ninnerBlocks[] {\n  ...,\n  _type == "button" => {\n    \nlink {\n  ...,\n  internalLink-> {\n    _type,\n    slug,\n    title,\n    locale,\n    "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value-> {\n      title,\n      slug,\n      locale\n    }\n  },\n  file {\n    asset-> {\n      ...\n    }\n  }\n}\n,\n    style,\n  },\n  \n  body[] {\n    ...,\n    markDefs[] {\n      ...,\n      _type == "link" => {\n        ...,\n        internalLink-> {\n          _type,\n          slug,\n          title\n        }\n      }\n    }\n}\n\n}\n\n\n    }\n\n,\n    \n  _type == \'CallToAction\' => {\n    ...,\n    callToActions[] {\n      ...,\n      \nlink {\n  ...,\n  internalLink-> {\n    _type,\n    slug,\n    title,\n    locale,\n    "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value-> {\n      title,\n      slug,\n      locale\n    }\n  },\n  file {\n    asset-> {\n      ...\n    }\n  }\n}\n,\n      \nMediaObject {\n  media {\n    ...,\n    select,\n    imageObject {\n      image{\n      \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n      },\n    },\n    \nvideoObject {\n  ...,\n  video {\n    asset-> {\n      _id,\n      url,\n      _type,\n      altText,\n      description,\n      title\n    }\n  },\n  image {\n    ...,\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n  }\n}\n,\n    \nvimeoObject {...,}\n  }\n}\n\n  ,\n    },\n    \ndesign{...,}\n,\n  }\n,\n    \n  _type == \'CallToAction2\' => {\n    ...,\n      links[] {\n\n    url,\n    "url": internalLink->slug.current,\n    blank,\n    _type,\n    label,\n    type,\n  },\n    \ndesign{...,}\n,\n  }\n,\n    \n  _type == "EmployeesType" => {\n    "departmentTitle": department[0]->title,\n    ...,\n    "employees": select(\n       \nview == "manual" => employees[]->{\n  title,\n  _createdAt,\n  "employeePosition": {\n    "stilling": employeePosition.stilling[]->{\n      _updatedAt, _createdAt, _rev, _type, _id, title\n    }\n  },\n  email,\n  image {\n        \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n,\n      },  _type,\n  phone,\n  _rev,\n  _id,\n  _updatedAt\n}\n,\n      \n  view == "all" => *[_type == "employee"] {\n    title,\n    _createdAt,\n    "employeePosition": {\n      "stilling": employeePosition.stilling[]->{\n        _updatedAt, _createdAt, _rev, _type, _id, title\n      }\n    },\n    email,\n    image {\n        \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n,\n      },    _type,\n    phone,\n    _rev,\n    _id,\n    _updatedAt\n  }\n\n    ),\n      \n"department": department[]->{\n    ...,\n    "employees": *[_type == "employee" && references(^._id)] {\n      title,\n      _createdAt,\n      "employeePosition": {\n        "stilling": employeePosition.stilling[]->{\n          _updatedAt, _createdAt, _rev, _type, _id, title\n        }\n      },\n      email,\n      image {\n        \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n,\n      },\n      _type,\n      phone,\n      _rev,\n      _id,\n      _updatedAt\n    }\n}\n  ,\n  }\n,\n    \n    _type == \'Gallery\' => {\n    ...,\n    images[]{\n      _key,\n      \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n,\n      alt,\n    },\n  },\n    \n_type == "LogoGallery" => {\n  ...,\n  images[] {\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n,\n  }\n}\n,\n    \n    _type == \'LogoGallery2\' => {\n    ...,\n    images[]{\n      \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n    },\n  },\n  }\n,\n  image{\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n  }\n}\n': EVENT_QUERYResult
    '\n*[_type == "page" && slug.current == $slug && locale == $locale][0] {\n  ...,\n  "localeInfo": {\n    locale,\n    "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value->{\n      title,\n      _type,\n      slug,\n      locale\n    },\n  },\n  _type,\n   // Inuse\nseoGroup {\n  seoImage {\n    asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n  },\n  ...\n}\n,\n  \n  pageBuilder[] {\n    \n  _type == \'textWithIllustration\' => {\n    _type,\n    _key,\n    flip,\n    \nMediaObject {\n  media {\n    ...,\n    select,\n    imageObject {\n      image{\n      \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n      },\n    },\n    \nvideoObject {\n  ...,\n  video {\n    asset-> {\n      _id,\n      url,\n      _type,\n      altText,\n      description,\n      title\n    }\n  },\n  image {\n    ...,\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n  }\n}\n,\n    \nvimeoObject {...,}\n  }\n}\n\n  ,\n    design{...,},\n    \ninnerBlocks[] {\n  ...,\n  _type == "button" => {\n    \nlink {\n  ...,\n  internalLink-> {\n    _type,\n    slug,\n    title,\n    locale,\n    "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value-> {\n      title,\n      slug,\n      locale\n    }\n  },\n  file {\n    asset-> {\n      ...\n    }\n  }\n}\n,\n    style,\n  },\n  \n  body[] {\n    ...,\n    markDefs[] {\n      ...,\n      _type == "link" => {\n        ...,\n        internalLink-> {\n          _type,\n          slug,\n          title\n        }\n      }\n    }\n}\n\n}\n\n,\n    SectionSettings{...,}\n  }\n,\n    \n  _type == "EventType" => {\n    amount,\n    ...,\n    "events": select(\n      \n  view == "all" => *[_type == "event"] {\n    \n  title, \n  "slug": slug.current,\n  date,\n  image {\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n,\n  },\n  _type,\n  description\n\n  }\n,\n      \n  view == "manual" => events[]->{\n    \n  title, \n  "slug": slug.current,\n  date,\n  image {\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n,\n  },\n  _type,\n  description\n\n  }\n,\n      \n  view == "newest" => *[_type == "event"] | order(date desc)[0...(6)]{\n    \n  title, \n  "slug": slug.current,\n  date,\n  image {\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n,\n  },\n  _type,\n  description\n\n  }\n\n    )\n  }\n,\n    \n  _type == "ArticlesType" => {\n    ...,\n    "articles": select(\n      view == "newest" => *[_type == "article"] | order(date desc)[0...24]{\n        \ntitle,\n_id,\n"slug": slug.current,\ndate,\n"image": image.asset->url,\n_type\n\n      },\n      view == "manual" => articles[]->{\n        \ntitle,\n_id,\n"slug": slug.current,\ndate,\n"image": image.asset->url,\n_type\n\n      },\n      view == "all" => *[_type == "article"] | order(date desc){\n        \ntitle,\n_id,\n"slug": slug.current,\ndate,\n"image": image.asset->url,\n_type\n\n      }\n    )\n  }\n,\n    \n_type == "contactFormType" => {\n  "heading": heading->heading,\n  ...,\n  array[] {\n    _key,\n    required,\n    fieldName,\n    placeholder,\n    inputType,\n    fieldId {\n      current,\n      _type\n    }\n  }\n}\n,\n    \n_type == "hero" => {\n  title, \n  subtitle,\n  _type,\n  \nMediaObject {\n  media {\n    ...,\n    select,\n    imageObject {\n      image{\n      \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n      },\n    },\n    \nvideoObject {\n  ...,\n  video {\n    asset-> {\n      _id,\n      url,\n      _type,\n      altText,\n      description,\n      title\n    }\n  },\n  image {\n    ...,\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n  }\n}\n,\n    \nvimeoObject {...,}\n  }\n}\n\n  ,\n}\n,\n    \n_type == "Hero2" => {\n  title, \n  _type,\n  \nMediaObject {\n  media {\n    ...,\n    select,\n    imageObject {\n      image{\n      \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n      },\n    },\n    \nvideoObject {\n  ...,\n  video {\n    asset-> {\n      _id,\n      url,\n      _type,\n      altText,\n      description,\n      title\n    }\n  },\n  image {\n    ...,\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n  }\n}\n,\n    \nvimeoObject {...,}\n  }\n}\n\n  ,\n  \ndesign{...,}\n,\n}\n,\n    \n_type == "Hero3" => {\n  title, \n  subtitle,\n  _type,\n  ...,\n  \nMediaObject {\n  media {\n    ...,\n    select,\n    imageObject {\n      image{\n      \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n      },\n    },\n    \nvideoObject {\n  ...,\n  video {\n    asset-> {\n      _id,\n      url,\n      _type,\n      altText,\n      description,\n      title\n    }\n  },\n  image {\n    ...,\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n  }\n}\n,\n    \nvimeoObject {...,}\n  }\n}\n\n  ,\n  \ndesign{...,}\n,\n}\n,\n    \n    _type == "textContainer" => {\n      ...,\n    \ninnerBlocks[] {\n  ...,\n  _type == "button" => {\n    \nlink {\n  ...,\n  internalLink-> {\n    _type,\n    slug,\n    title,\n    locale,\n    "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value-> {\n      title,\n      slug,\n      locale\n    }\n  },\n  file {\n    asset-> {\n      ...\n    }\n  }\n}\n,\n    style,\n  },\n  \n  body[] {\n    ...,\n    markDefs[] {\n      ...,\n      _type == "link" => {\n        ...,\n        internalLink-> {\n          _type,\n          slug,\n          title\n        }\n      }\n    }\n}\n\n}\n\n\n    }\n\n,\n    \n  _type == \'CallToAction\' => {\n    ...,\n    callToActions[] {\n      ...,\n      \nlink {\n  ...,\n  internalLink-> {\n    _type,\n    slug,\n    title,\n    locale,\n    "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value-> {\n      title,\n      slug,\n      locale\n    }\n  },\n  file {\n    asset-> {\n      ...\n    }\n  }\n}\n,\n      \nMediaObject {\n  media {\n    ...,\n    select,\n    imageObject {\n      image{\n      \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n      },\n    },\n    \nvideoObject {\n  ...,\n  video {\n    asset-> {\n      _id,\n      url,\n      _type,\n      altText,\n      description,\n      title\n    }\n  },\n  image {\n    ...,\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n  }\n}\n,\n    \nvimeoObject {...,}\n  }\n}\n\n  ,\n    },\n    \ndesign{...,}\n,\n  }\n,\n    \n  _type == \'CallToAction2\' => {\n    ...,\n      links[] {\n\n    url,\n    "url": internalLink->slug.current,\n    blank,\n    _type,\n    label,\n    type,\n  },\n    \ndesign{...,}\n,\n  }\n,\n    \n  _type == "EmployeesType" => {\n    "departmentTitle": department[0]->title,\n    ...,\n    "employees": select(\n       \nview == "manual" => employees[]->{\n  title,\n  _createdAt,\n  "employeePosition": {\n    "stilling": employeePosition.stilling[]->{\n      _updatedAt, _createdAt, _rev, _type, _id, title\n    }\n  },\n  email,\n  image {\n        \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n,\n      },  _type,\n  phone,\n  _rev,\n  _id,\n  _updatedAt\n}\n,\n      \n  view == "all" => *[_type == "employee"] {\n    title,\n    _createdAt,\n    "employeePosition": {\n      "stilling": employeePosition.stilling[]->{\n        _updatedAt, _createdAt, _rev, _type, _id, title\n      }\n    },\n    email,\n    image {\n        \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n,\n      },    _type,\n    phone,\n    _rev,\n    _id,\n    _updatedAt\n  }\n\n    ),\n      \n"department": department[]->{\n    ...,\n    "employees": *[_type == "employee" && references(^._id)] {\n      title,\n      _createdAt,\n      "employeePosition": {\n        "stilling": employeePosition.stilling[]->{\n          _updatedAt, _createdAt, _rev, _type, _id, title\n        }\n      },\n      email,\n      image {\n        \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n,\n      },\n      _type,\n      phone,\n      _rev,\n      _id,\n      _updatedAt\n    }\n}\n  ,\n  }\n,\n    \n    _type == \'Gallery\' => {\n    ...,\n    images[]{\n      _key,\n      \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n,\n      alt,\n    },\n  },\n    \n_type == "LogoGallery" => {\n  ...,\n  images[] {\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n,\n  }\n}\n,\n    \n    _type == \'LogoGallery2\' => {\n    ...,\n    images[]{\n      \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n    },\n  },\n  }\n,\n  mainImage {\n    ...,\n    asset-> {\n      ...,\n      _id,\n      url,\n      _type,\n      altText,\n      description,\n      title,\n      metadata {\n        blurHash,\n        dimensions\n      }\n    }\n  }\n}\n': PAGE_QUERYResult
    '\n*[_type == "article" && slug.current == $slug][0] {\n  ...,\n  "localeInfo": {\n    locale,\n    "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value->{\n      title,\n      _type,\n      slug,\n      locale\n    },\n  },\n\n  _type,\n   // Inuse\nseoGroup {\n  seoImage {\n    asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n  },\n  ...\n}\n,\n  \n  pageBuilder[] {\n    \n  _type == \'textWithIllustration\' => {\n    _type,\n    _key,\n    flip,\n    \nMediaObject {\n  media {\n    ...,\n    select,\n    imageObject {\n      image{\n      \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n      },\n    },\n    \nvideoObject {\n  ...,\n  video {\n    asset-> {\n      _id,\n      url,\n      _type,\n      altText,\n      description,\n      title\n    }\n  },\n  image {\n    ...,\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n  }\n}\n,\n    \nvimeoObject {...,}\n  }\n}\n\n  ,\n    design{...,},\n    \ninnerBlocks[] {\n  ...,\n  _type == "button" => {\n    \nlink {\n  ...,\n  internalLink-> {\n    _type,\n    slug,\n    title,\n    locale,\n    "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value-> {\n      title,\n      slug,\n      locale\n    }\n  },\n  file {\n    asset-> {\n      ...\n    }\n  }\n}\n,\n    style,\n  },\n  \n  body[] {\n    ...,\n    markDefs[] {\n      ...,\n      _type == "link" => {\n        ...,\n        internalLink-> {\n          _type,\n          slug,\n          title\n        }\n      }\n    }\n}\n\n}\n\n,\n    SectionSettings{...,}\n  }\n,\n    \n  _type == "EventType" => {\n    amount,\n    ...,\n    "events": select(\n      \n  view == "all" => *[_type == "event"] {\n    \n  title, \n  "slug": slug.current,\n  date,\n  image {\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n,\n  },\n  _type,\n  description\n\n  }\n,\n      \n  view == "manual" => events[]->{\n    \n  title, \n  "slug": slug.current,\n  date,\n  image {\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n,\n  },\n  _type,\n  description\n\n  }\n,\n      \n  view == "newest" => *[_type == "event"] | order(date desc)[0...(6)]{\n    \n  title, \n  "slug": slug.current,\n  date,\n  image {\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n,\n  },\n  _type,\n  description\n\n  }\n\n    )\n  }\n,\n    \n  _type == "ArticlesType" => {\n    ...,\n    "articles": select(\n      view == "newest" => *[_type == "article"] | order(date desc)[0...24]{\n        \ntitle,\n_id,\n"slug": slug.current,\ndate,\n"image": image.asset->url,\n_type\n\n      },\n      view == "manual" => articles[]->{\n        \ntitle,\n_id,\n"slug": slug.current,\ndate,\n"image": image.asset->url,\n_type\n\n      },\n      view == "all" => *[_type == "article"] | order(date desc){\n        \ntitle,\n_id,\n"slug": slug.current,\ndate,\n"image": image.asset->url,\n_type\n\n      }\n    )\n  }\n,\n    \n_type == "contactFormType" => {\n  "heading": heading->heading,\n  ...,\n  array[] {\n    _key,\n    required,\n    fieldName,\n    placeholder,\n    inputType,\n    fieldId {\n      current,\n      _type\n    }\n  }\n}\n,\n    \n_type == "hero" => {\n  title, \n  subtitle,\n  _type,\n  \nMediaObject {\n  media {\n    ...,\n    select,\n    imageObject {\n      image{\n      \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n      },\n    },\n    \nvideoObject {\n  ...,\n  video {\n    asset-> {\n      _id,\n      url,\n      _type,\n      altText,\n      description,\n      title\n    }\n  },\n  image {\n    ...,\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n  }\n}\n,\n    \nvimeoObject {...,}\n  }\n}\n\n  ,\n}\n,\n    \n_type == "Hero2" => {\n  title, \n  _type,\n  \nMediaObject {\n  media {\n    ...,\n    select,\n    imageObject {\n      image{\n      \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n      },\n    },\n    \nvideoObject {\n  ...,\n  video {\n    asset-> {\n      _id,\n      url,\n      _type,\n      altText,\n      description,\n      title\n    }\n  },\n  image {\n    ...,\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n  }\n}\n,\n    \nvimeoObject {...,}\n  }\n}\n\n  ,\n  \ndesign{...,}\n,\n}\n,\n    \n_type == "Hero3" => {\n  title, \n  subtitle,\n  _type,\n  ...,\n  \nMediaObject {\n  media {\n    ...,\n    select,\n    imageObject {\n      image{\n      \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n      },\n    },\n    \nvideoObject {\n  ...,\n  video {\n    asset-> {\n      _id,\n      url,\n      _type,\n      altText,\n      description,\n      title\n    }\n  },\n  image {\n    ...,\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n  }\n}\n,\n    \nvimeoObject {...,}\n  }\n}\n\n  ,\n  \ndesign{...,}\n,\n}\n,\n    \n    _type == "textContainer" => {\n      ...,\n    \ninnerBlocks[] {\n  ...,\n  _type == "button" => {\n    \nlink {\n  ...,\n  internalLink-> {\n    _type,\n    slug,\n    title,\n    locale,\n    "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value-> {\n      title,\n      slug,\n      locale\n    }\n  },\n  file {\n    asset-> {\n      ...\n    }\n  }\n}\n,\n    style,\n  },\n  \n  body[] {\n    ...,\n    markDefs[] {\n      ...,\n      _type == "link" => {\n        ...,\n        internalLink-> {\n          _type,\n          slug,\n          title\n        }\n      }\n    }\n}\n\n}\n\n\n    }\n\n,\n    \n  _type == \'CallToAction\' => {\n    ...,\n    callToActions[] {\n      ...,\n      \nlink {\n  ...,\n  internalLink-> {\n    _type,\n    slug,\n    title,\n    locale,\n    "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value-> {\n      title,\n      slug,\n      locale\n    }\n  },\n  file {\n    asset-> {\n      ...\n    }\n  }\n}\n,\n      \nMediaObject {\n  media {\n    ...,\n    select,\n    imageObject {\n      image{\n      \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n      },\n    },\n    \nvideoObject {\n  ...,\n  video {\n    asset-> {\n      _id,\n      url,\n      _type,\n      altText,\n      description,\n      title\n    }\n  },\n  image {\n    ...,\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n  }\n}\n,\n    \nvimeoObject {...,}\n  }\n}\n\n  ,\n    },\n    \ndesign{...,}\n,\n  }\n,\n    \n  _type == \'CallToAction2\' => {\n    ...,\n      links[] {\n\n    url,\n    "url": internalLink->slug.current,\n    blank,\n    _type,\n    label,\n    type,\n  },\n    \ndesign{...,}\n,\n  }\n,\n    \n  _type == "EmployeesType" => {\n    "departmentTitle": department[0]->title,\n    ...,\n    "employees": select(\n       \nview == "manual" => employees[]->{\n  title,\n  _createdAt,\n  "employeePosition": {\n    "stilling": employeePosition.stilling[]->{\n      _updatedAt, _createdAt, _rev, _type, _id, title\n    }\n  },\n  email,\n  image {\n        \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n,\n      },  _type,\n  phone,\n  _rev,\n  _id,\n  _updatedAt\n}\n,\n      \n  view == "all" => *[_type == "employee"] {\n    title,\n    _createdAt,\n    "employeePosition": {\n      "stilling": employeePosition.stilling[]->{\n        _updatedAt, _createdAt, _rev, _type, _id, title\n      }\n    },\n    email,\n    image {\n        \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n,\n      },    _type,\n    phone,\n    _rev,\n    _id,\n    _updatedAt\n  }\n\n    ),\n      \n"department": department[]->{\n    ...,\n    "employees": *[_type == "employee" && references(^._id)] {\n      title,\n      _createdAt,\n      "employeePosition": {\n        "stilling": employeePosition.stilling[]->{\n          _updatedAt, _createdAt, _rev, _type, _id, title\n        }\n      },\n      email,\n      image {\n        \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n,\n      },\n      _type,\n      phone,\n      _rev,\n      _id,\n      _updatedAt\n    }\n}\n  ,\n  }\n,\n    \n    _type == \'Gallery\' => {\n    ...,\n    images[]{\n      _key,\n      \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n,\n      alt,\n    },\n  },\n    \n_type == "LogoGallery" => {\n  ...,\n  images[] {\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n,\n  }\n}\n,\n    \n    _type == \'LogoGallery2\' => {\n    ...,\n    images[]{\n      \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n    },\n  },\n  }\n,\n  image {\n    ...,\n    asset-> {\n      ...,\n      _id,\n      url,\n      _type,\n      altText,\n      description,\n      title,\n      metadata {\n        blurHash,\n        dimensions\n      }\n    }\n  }\n}\n': ARTICLE_QUERYResult
    '\n    *[_type == "footer" && locale == $locale][0] {\n      title,\n      locale,\n      logo {\n       \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n      },\n      object {\n        companyName,\n        adressBook{\n          street,\n          zip\n        },\n        telephone,\n        email,\n        cvr\n      },\n      social[] {\n        platform,\n        url\n      },\n      openingHours[] {\n        day,\n        hours\n      }\n    }\n': FOOTER_QUERYResult
    '\n*[_type == "settings" && locale == $locale][0] {\n  ...,\n  bodyScripts,\n  siteTitle,\n  siteDescription,\n  footerScripts,\n  headScripts,\n  googleTagManager {\n    id,\n    verification,\n  }\n}\n': SITE_SETTINGS_QUERYResult
    '\nlink {\n  ...,\n  internalLink-> {\n    _type,\n    slug,\n    title,\n    locale,\n    "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value-> {\n      title,\n      slug,\n      locale\n    }\n  },\n  file {\n    asset-> {\n      ...\n    }\n  }\n}\n': ButtonQueryResult
    '\ndesign{...,}\n': DesignQueryResult
    '\nvideoObject {\n  ...,\n  video {\n    asset->{\n      _id,\n      url,\n      _type,\n      altText,\n      description,\n      title,\n    }\n  },\n  image {\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n,\n  }\n}\n\n': VideoObjectResult
    '\n *[_type == \'redirect\']{\n    subLinks[]{\n      "destination": destinationPage->{\n        ...,\n      },\n          "source": source->{\n        ...,\n      },\n    }\n  }\n': RedirectQueryResult
    '\nvimeoObject {...,}': VimeoObjectResult
    '\n  body[] {\n    ...,\n    markDefs[] {\n      ...,\n      _type == "link" => {\n        ...,\n        internalLink-> {\n          _type,\n          slug,\n          title\n        }\n      }\n    }\n}\n': IsPortableTextQueryResult
    '\ninnerBlocks[] {\n  ...,\n  _type == "button" => {\n    \nlink {\n  ...,\n  internalLink-> {\n    _type,\n    slug,\n    title,\n    locale,\n    "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value-> {\n      title,\n      slug,\n      locale\n    }\n  },\n  file {\n    asset-> {\n      ...\n    }\n  }\n}\n,\n    style,\n  },\n  \n  body[] {\n    ...,\n    markDefs[] {\n      ...,\n      _type == "link" => {\n        ...,\n        internalLink-> {\n          _type,\n          slug,\n          title\n        }\n      }\n    }\n}\n\n}\n\n': InnerBlocksQueryResult
    '\nMediaObject {\n  media {\n    ...,\n    select,\n    imageObject {\n      image{\n      \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n      },\n    },\n    \nvideoObject {\n  ...,\n  video {\n    asset-> {\n      _id,\n      url,\n      _type,\n      altText,\n      description,\n      title\n    }\n  },\n  image {\n    ...,\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n  }\n}\n,\n    \nvimeoObject {...,}\n  }\n}\n\n  ': MediaObjectQueryResult
    '\n  pageBuilder[] {\n    \n  _type == \'textWithIllustration\' => {\n    _type,\n    _key,\n    flip,\n    \nMediaObject {\n  media {\n    ...,\n    select,\n    imageObject {\n      image{\n      \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n      },\n    },\n    \nvideoObject {\n  ...,\n  video {\n    asset-> {\n      _id,\n      url,\n      _type,\n      altText,\n      description,\n      title\n    }\n  },\n  image {\n    ...,\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n  }\n}\n,\n    \nvimeoObject {...,}\n  }\n}\n\n  ,\n    design{...,},\n    \ninnerBlocks[] {\n  ...,\n  _type == "button" => {\n    \nlink {\n  ...,\n  internalLink-> {\n    _type,\n    slug,\n    title,\n    locale,\n    "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value-> {\n      title,\n      slug,\n      locale\n    }\n  },\n  file {\n    asset-> {\n      ...\n    }\n  }\n}\n,\n    style,\n  },\n  \n  body[] {\n    ...,\n    markDefs[] {\n      ...,\n      _type == "link" => {\n        ...,\n        internalLink-> {\n          _type,\n          slug,\n          title\n        }\n      }\n    }\n}\n\n}\n\n,\n    SectionSettings{...,}\n  }\n,\n    \n  _type == "EventType" => {\n    amount,\n    ...,\n    "events": select(\n      \n  view == "all" => *[_type == "event"] {\n    \n  title, \n  "slug": slug.current,\n  date,\n  image {\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n,\n  },\n  _type,\n  description\n\n  }\n,\n      \n  view == "manual" => events[]->{\n    \n  title, \n  "slug": slug.current,\n  date,\n  image {\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n,\n  },\n  _type,\n  description\n\n  }\n,\n      \n  view == "newest" => *[_type == "event"] | order(date desc)[0...(6)]{\n    \n  title, \n  "slug": slug.current,\n  date,\n  image {\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n,\n  },\n  _type,\n  description\n\n  }\n\n    )\n  }\n,\n    \n  _type == "ArticlesType" => {\n    ...,\n    "articles": select(\n      view == "newest" => *[_type == "article"] | order(date desc)[0...24]{\n        \ntitle,\n_id,\n"slug": slug.current,\ndate,\n"image": image.asset->url,\n_type\n\n      },\n      view == "manual" => articles[]->{\n        \ntitle,\n_id,\n"slug": slug.current,\ndate,\n"image": image.asset->url,\n_type\n\n      },\n      view == "all" => *[_type == "article"] | order(date desc){\n        \ntitle,\n_id,\n"slug": slug.current,\ndate,\n"image": image.asset->url,\n_type\n\n      }\n    )\n  }\n,\n    \n_type == "contactFormType" => {\n  "heading": heading->heading,\n  ...,\n  array[] {\n    _key,\n    required,\n    fieldName,\n    placeholder,\n    inputType,\n    fieldId {\n      current,\n      _type\n    }\n  }\n}\n,\n    \n_type == "hero" => {\n  title, \n  subtitle,\n  _type,\n  \nMediaObject {\n  media {\n    ...,\n    select,\n    imageObject {\n      image{\n      \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n      },\n    },\n    \nvideoObject {\n  ...,\n  video {\n    asset-> {\n      _id,\n      url,\n      _type,\n      altText,\n      description,\n      title\n    }\n  },\n  image {\n    ...,\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n  }\n}\n,\n    \nvimeoObject {...,}\n  }\n}\n\n  ,\n}\n,\n    \n_type == "Hero2" => {\n  title, \n  _type,\n  \nMediaObject {\n  media {\n    ...,\n    select,\n    imageObject {\n      image{\n      \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n      },\n    },\n    \nvideoObject {\n  ...,\n  video {\n    asset-> {\n      _id,\n      url,\n      _type,\n      altText,\n      description,\n      title\n    }\n  },\n  image {\n    ...,\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n  }\n}\n,\n    \nvimeoObject {...,}\n  }\n}\n\n  ,\n  \ndesign{...,}\n,\n}\n,\n    \n_type == "Hero3" => {\n  title, \n  subtitle,\n  _type,\n  ...,\n  \nMediaObject {\n  media {\n    ...,\n    select,\n    imageObject {\n      image{\n      \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n      },\n    },\n    \nvideoObject {\n  ...,\n  video {\n    asset-> {\n      _id,\n      url,\n      _type,\n      altText,\n      description,\n      title\n    }\n  },\n  image {\n    ...,\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n  }\n}\n,\n    \nvimeoObject {...,}\n  }\n}\n\n  ,\n  \ndesign{...,}\n,\n}\n,\n    \n    _type == "textContainer" => {\n      ...,\n    \ninnerBlocks[] {\n  ...,\n  _type == "button" => {\n    \nlink {\n  ...,\n  internalLink-> {\n    _type,\n    slug,\n    title,\n    locale,\n    "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value-> {\n      title,\n      slug,\n      locale\n    }\n  },\n  file {\n    asset-> {\n      ...\n    }\n  }\n}\n,\n    style,\n  },\n  \n  body[] {\n    ...,\n    markDefs[] {\n      ...,\n      _type == "link" => {\n        ...,\n        internalLink-> {\n          _type,\n          slug,\n          title\n        }\n      }\n    }\n}\n\n}\n\n\n    }\n\n,\n    \n  _type == \'CallToAction\' => {\n    ...,\n    callToActions[] {\n      ...,\n      \nlink {\n  ...,\n  internalLink-> {\n    _type,\n    slug,\n    title,\n    locale,\n    "_translations": *[_type == "translation.metadata" && references(^._id)].translations[].value-> {\n      title,\n      slug,\n      locale\n    }\n  },\n  file {\n    asset-> {\n      ...\n    }\n  }\n}\n,\n      \nMediaObject {\n  media {\n    ...,\n    select,\n    imageObject {\n      image{\n      \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n      },\n    },\n    \nvideoObject {\n  ...,\n  video {\n    asset-> {\n      _id,\n      url,\n      _type,\n      altText,\n      description,\n      title\n    }\n  },\n  image {\n    ...,\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n  }\n}\n,\n    \nvimeoObject {...,}\n  }\n}\n\n  ,\n    },\n    \ndesign{...,}\n,\n  }\n,\n    \n  _type == \'CallToAction2\' => {\n    ...,\n      links[] {\n\n    url,\n    "url": internalLink->slug.current,\n    blank,\n    _type,\n    label,\n    type,\n  },\n    \ndesign{...,}\n,\n  }\n,\n    \n  _type == "EmployeesType" => {\n    "departmentTitle": department[0]->title,\n    ...,\n    "employees": select(\n       \nview == "manual" => employees[]->{\n  title,\n  _createdAt,\n  "employeePosition": {\n    "stilling": employeePosition.stilling[]->{\n      _updatedAt, _createdAt, _rev, _type, _id, title\n    }\n  },\n  email,\n  image {\n        \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n,\n      },  _type,\n  phone,\n  _rev,\n  _id,\n  _updatedAt\n}\n,\n      \n  view == "all" => *[_type == "employee"] {\n    title,\n    _createdAt,\n    "employeePosition": {\n      "stilling": employeePosition.stilling[]->{\n        _updatedAt, _createdAt, _rev, _type, _id, title\n      }\n    },\n    email,\n    image {\n        \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n,\n      },    _type,\n    phone,\n    _rev,\n    _id,\n    _updatedAt\n  }\n\n    ),\n      \n"department": department[]->{\n    ...,\n    "employees": *[_type == "employee" && references(^._id)] {\n      title,\n      _createdAt,\n      "employeePosition": {\n        "stilling": employeePosition.stilling[]->{\n          _updatedAt, _createdAt, _rev, _type, _id, title\n        }\n      },\n      email,\n      image {\n        \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n,\n      },\n      _type,\n      phone,\n      _rev,\n      _id,\n      _updatedAt\n    }\n}\n  ,\n  }\n,\n    \n    _type == \'Gallery\' => {\n    ...,\n    images[]{\n      _key,\n      \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n,\n      alt,\n    },\n  },\n    \n_type == "LogoGallery" => {\n  ...,\n  images[] {\n    \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n,\n  }\n}\n,\n    \n    _type == \'LogoGallery2\' => {\n    ...,\n    images[]{\n      \n  asset-> {\n    _id,\n    url,\n    _type,\n    altText,\n    description,\n    title,\n    metadata {\n      blurHash,\n      dimensions\n    }\n  },\n  crop {\n    top,\n    left,\n    bottom,\n    _type,\n    right\n\n  },\n  hotspot {\n    _type,\n    width,\n    x,\n    y,\n    height\n  }\n\n    },\n  },\n  }\n': PageBuilderQueryResult
  }
}
